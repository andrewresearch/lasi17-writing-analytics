{"paragraphs":[{"text":"%md\n\n### Workshop approach\n\nTo get the most out of this workshop, you can work at a level most appropriate to your abilities:\n\n- **Novice:** Follow along step by step in the provided notes\n- **Experienced:** Use the notes as guides, but try pushing the content with new code, or try in a different language\n- **Expert:** Extract the principles from the workshop but implement yourself in new notes or by writing code in an IDE\n\nYou will also get more value out of this workshop if you:\n\n- **Question** how the ideas apply to your own work, and critique the material presented\n- **Discuss** your ideas with others and work collaboratively\n- **Share** your work with others at the workshop and beyond\n \n#### Common theme\n\nRegardless of which level you work at, there will be a common theme for the workshop which can be seen in 3 fundamental questions:\n\n1. What are the pedagogical aspects?\n2. What are the computational aspects?\n3. How do we connect the pedagogical and the computational\n\nWe will discover that simple analytics can be hard to connect to learning, and that meaningful learning tasks can be hard to implement computationally. However, the main goal of the workshop is to demonstrate an approach that builds connections between learning and analytics in a way that produces Writing Analytics with potential learning benefits. As such, the workshop is not a solution to a problem nor an answer to a question, but rather the demonstration of a process that will hopefully be beneficial to you in solving problems and answering questions related to Writing Analytics. \n\n\n### Resources\n\nEverything that you require for this workshop is available on GitHub and released under an Apache 2.0 license. We encourage you to make improvements (or add additional resources) and contribute back to the repos so that this workshop can be improved for future participants. \n\nIf you are unfamiliar with working with GitHub, then see [this website]() for helpful tips.\n\nYou can run these notebooks yourself on your own machine by following the installation steps in the [repo's README](https://github.com/uts-cic/tap-notebooks)\n\nYou can find some help for using Zeppelin here...\n\n   - [Zeppelin documentation]()\n   - [Zeppelin UI Overview](http://zeppelin.apache.org/docs/0.7.1/quickstart/explorezeppelinui.html)\n   - [Other]()\n\n***If you find additional helpful resources, please share them***","user":"admin","dateUpdated":"2017-06-02T13:56:26+1000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251273_-1726694529","id":"20170601-223509_1254386471","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T13:56:26+1000","dateFinished":"2017-06-02T13:56:26+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15480","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Workshop approach</h3>\n<p>To get the most out of this workshop, you can work at a level most appropriate to your abilities:</p>\n<ul>\n  <li><strong>Novice:</strong> Follow along step by step in the provided notes</li>\n  <li><strong>Experienced:</strong> Use the notes as guides, but try pushing the content with new code, or try in a different language</li>\n  <li><strong>Expert:</strong> Extract the principles from the workshop but implement yourself in new notes or by writing code in an IDE</li>\n</ul>\n<p>You will also get more value out of this workshop if you:</p>\n<ul>\n  <li><strong>Question</strong> how the ideas apply to your own work, and critique the material presented</li>\n  <li><strong>Discuss</strong> your ideas with others and work collaboratively</li>\n  <li><strong>Share</strong> your work with others at the workshop and beyond</li>\n</ul>\n<h4>Common theme</h4>\n<p>Regardless of which level you work at, there will be a common theme for the workshop which can be seen in 3 fundamental questions:</p>\n<ol>\n  <li>What are the pedagogical aspects?</li>\n  <li>What are the computational aspects?</li>\n  <li>How do we connect the pedagogical and the computational</li>\n</ol>\n<p>We will discover that simple analytics can be hard to connect to learning, and that meaningful learning tasks can be hard to implement computationally. However, the main goal of the workshop is to demonstrate an approach that builds connections between learning and analytics in a way that produces Writing Analytics with potential learning benefits. As such, the workshop is not a solution to a problem nor an answer to a question, but rather the demonstration of a process that will hopefully be beneficial to you in solving problems and answering questions related to Writing Analytics. </p>\n<h3>Resources</h3>\n<p>Everything that you require for this workshop is available on GitHub and released under an Apache 2.0 license. We encourage you to make improvements (or add additional resources) and contribute back to the repos so that this workshop can be improved for future participants. </p>\n<p>If you are unfamiliar with working with GitHub, then see <a href=\"\">this website</a> for helpful tips.</p>\n<p>You can run these notebooks yourself on your own machine by following the installation steps in the <a href=\"https://github.com/uts-cic/tap-notebooks\">repo&rsquo;s README</a></p>\n<p>You can find some help for using Zeppelin here&hellip;</p>\n<ul>\n  <li><a href=\"\">Zeppelin documentation</a></li>\n  <li><a href=\"http://zeppelin.apache.org/docs/0.7.1/quickstart/explorezeppelinui.html\">Zeppelin UI Overview</a></li>\n  <li><a href=\"\">Other</a></li>\n</ul>\n<p><strong><em>If you find additional helpful resources, please share them</em></strong></p>\n</div>"}]}},{"text":"%md ### The basics\n\nEach note has a series of paragraphs represented by the white boxes with light grey menu in the top right.\nSome paragraphs have text (like this), and others have code that you can run. You can edit a code paragraph by clicking in it.\n\nIn the paragraph to the right, replace the ??? with the suggested string and run the paragraph either by clicking the 'play' triangle, or by pressing `shift-return`. \n\nThe result should be:\n\n```myWorld: String = \"LASI'17\" ```\n\nOnce you have this result, run the next paragraph to show a sentence with the value included. \n\nNotice that result is a string, but because we didn't assign it to a name (variable or value), the notebook assigned it to a result (`res1`). This is an actual value and we can work with it.\n\nObjects (values, variables, functions, etc) declared in one paragraph can be used in subsequent paragraphs. In the paragraph that you just ran, you took a value declared previously (`myWorld`) and embedded it in a string (`s\"Hello !\"`).\n\nExplore this idea by trying the following:\n\n1. Create a new paragraph by clicking the gear icon in the `you try` paragraph and selecting `insert new`\n2. Declare a new value `mySentence` with a sentence embedding `res1`\n3. Create another new paragraph\n4. Print `newSentence` to the display\n\nWe will use these basics to gradually increase the complexity of the analytics that we explore.","user":"admin","dateUpdated":"2017-06-02T13:56:30+1000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":7,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251283_-1716691058","id":"20170601-223732_1782790969","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T13:56:30+1000","dateFinished":"2017-06-02T13:56:30+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15481","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>The basics</h3>\n<p>Each note has a series of paragraphs represented by the white boxes with light grey menu in the top right.<br/>Some paragraphs have text (like this), and others have code that you can run. You can edit a code paragraph by clicking in it.</p>\n<p>In the paragraph to the right, replace the ??? with the suggested string and run the paragraph either by clicking the &lsquo;play&rsquo; triangle, or by pressing <code>shift-return</code>. </p>\n<p>The result should be:</p>\n<p><code>myWorld: String = &quot;LASI&#39;17&quot;</code></p>\n<p>Once you have this result, run the next paragraph to show a sentence with the value included. </p>\n<p>Notice that result is a string, but because we didn&rsquo;t assign it to a name (variable or value), the notebook assigned it to a result (<code>res1</code>). This is an actual value and we can work with it.</p>\n<p>Objects (values, variables, functions, etc) declared in one paragraph can be used in subsequent paragraphs. In the paragraph that you just ran, you took a value declared previously (<code>myWorld</code>) and embedded it in a string (<code>s&quot;Hello !&quot;</code>).</p>\n<p>Explore this idea by trying the following:</p>\n<ol>\n  <li>Create a new paragraph by clicking the gear icon in the <code>you try</code> paragraph and selecting <code>insert new</code></li>\n  <li>Declare a new value <code>mySentence</code> with a sentence embedding <code>res1</code></li>\n  <li>Create another new paragraph</li>\n  <li>Print <code>newSentence</code> to the display</li>\n</ol>\n<p>We will use these basics to gradually increase the complexity of the analytics that we explore.</p>\n</div>"}]}},{"text":"//Let's assign a value \n// Assign \"LASI'17\" to myWorld by replacing the ???\n\nval myWorld = \"LASI'17\"\n","user":"admin","dateUpdated":"2017-06-02T10:15:45+1000","config":{"colWidth":5,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251282_-1716306309","id":"20170601-223705_51456902","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T09:05:55+1000","dateFinished":"2017-06-02T09:05:55+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15482"},{"text":"s\"Hello $myWorld!\"","user":"admin","dateUpdated":"2017-06-02T10:15:51+1000","config":{"colWidth":5,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251284_-1718614802","id":"20170601-223815_1245254311","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T09:06:08+1000","dateFinished":"2017-06-02T09:06:08+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15483"},{"text":"%md\n#### you try\n```\nval mySentence = ???\nprintln(mySentence)\n```","user":"admin","dateUpdated":"2017-06-02T13:56:36+1000","config":{"colWidth":5,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496362337451_-1843357536","id":"20170602-101217_871244613","dateCreated":"2017-06-02T10:12:17+1000","dateStarted":"2017-06-02T13:56:36+1000","dateFinished":"2017-06-02T13:56:36+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15484","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>you try</h4>\n<pre><code>val mySentence = ???\nprintln(mySentence)\n</code></pre>\n</div>"}]}},{"text":"%md\n### Data input and output\n\nFor this workshop we're going to need the ability to input and output the data that we are working with. Rather than coding this from scratch, and everytime we need it, these notes include two software objects that will provide access to:\n\n1. the server's file system for loading and saving text \n2. the Text Analytics Pipeline (TAP) which is going to do the analysis work\n\nIn this getting started note, we will take a look at this code just to get an idea as to how the note is handling the input and output of text, but in subsequent notes, these will be loaded ready to go.\n\n#### The LocalIO object\n\nThis object provides some basic filesystem access on the server that you are connected to. It provides:\n- Common properties like directories and filenames\n- Common file access methods like listing the contents of a directory\n\nDisplay the code for `LocalIO` by clicking the `Show editor` icon in the paragraph below. Then run the paragraph to define the object.\n\nWhen you run the paragraph with this code, it compiles the code and creates an object called `LocalIO` - you should see a result of `defined object LocalIO`.","user":"admin","dateUpdated":"2017-06-02T13:56:45+1000","config":{"colWidth":12,"editorHide":true,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251288_-1720153798","id":"20170601-224221_1840277964","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T13:56:45+1000","dateFinished":"2017-06-02T13:56:45+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15485","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Data input and output</h3>\n<p>For this workshop we&rsquo;re going to need the ability to input and output the data that we are working with. Rather than coding this from scratch, and everytime we need it, these notes include two software objects that will provide access to:</p>\n<ol>\n  <li>the server&rsquo;s file system for loading and saving text</li>\n  <li>the Text Analytics Pipeline (TAP) which is going to do the analysis work</li>\n</ol>\n<p>In this getting started note, we will take a look at this code just to get an idea as to how the note is handling the input and output of text, but in subsequent notes, these will be loaded ready to go.</p>\n<h4>The LocalIO object</h4>\n<p>This object provides some basic filesystem access on the server that you are connected to. It provides:<br/>- Common properties like directories and filenames<br/>- Common file access methods like listing the contents of a directory</p>\n<p>Display the code for <code>LocalIO</code> by clicking the <code>Show editor</code> icon in the paragraph below. Then run the paragraph to define the object.</p>\n<p>When you run the paragraph with this code, it compiles the code and creates an object called <code>LocalIO</code> - you should see a result of <code>defined object LocalIO</code>.</p>\n</div>"}]}},{"title":"LocalIO","text":"object LocalIO {\n    \n    import java.io.File\n    import scala.io.Source\n    \n    val IN_DIR_NAME = \"/input_files\"\n    val OUT_DIR_NAME = \"/output_files\"\n    \n    private val _thisDir:String = new File(\".\").getCanonicalPath\n    private var _workingDir:String = _thisDir\n\n    lazy val inputFileDir = _workingDir+IN_DIR_NAME\n    lazy val outputFileDir = _workingDir+OUT_DIR_NAME\n    \n    val visibleFile = (file:File) => !file.isHidden\n    val notDirectory = (file:File) => !file.isDirectory\n    val textFile = (file:File) => file.getName.split('.').last.contains(\"txt\")\n    \n    def setWorkingDir(directoryPath:String) = {\n        println(s\"Setting the working directory to: $directoryPath\")\n        this._workingDir = directoryPath\n    }\n    \n    def directoryFromString(directory:String):Option[File] = {\n         val newDir = new File(directory)\n         if (newDir.exists && newDir.isDirectory) Some(newDir)\n         else None\n    }\n    \n    def listFiles(directory:String):List[File] = {\n        directoryFromString(directory) match {\n            case Some(dir) => dir.listFiles.toList\n            case None => List[File]()\n        }\n    }\n    \n    def workingDirFiles = listFiles(_workingDir)\n    \n    def readFile(file:File) = {\n        val source = Source.fromFile(file.getCanonicalPath)\n        try {\n            source.getLines.mkString(\"\\n\\n\")\n        } finally {\n            source.close\n        }\n    }\n}\n","user":"admin","dateUpdated":"2017-06-02T13:00:18+1000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true,"tableHide":false,"lineNumbers":true,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251291_-1719769049","id":"20170601-224242_836666214","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T11:27:17+1000","dateFinished":"2017-06-02T11:27:18+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15486"},{"text":"%md\nBefore we can use `LocalIO` we need to set the directory that we want to work with. We could do this in code with something like:\n```\nval myWorkingDir = \"/some/path/to/where/my/files/are\"\nLocalIO.setWorkingDir(myWorkingDir)\n```\nOr we can get the path from a Note input as in the paragraph below","user":"admin","dateUpdated":"2017-06-02T13:56:49+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496365858683_-566922150","id":"20170602-111058_1930461570","dateCreated":"2017-06-02T11:10:58+1000","dateStarted":"2017-06-02T13:56:49+1000","dateFinished":"2017-06-02T13:56:49+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15487","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Before we can use <code>LocalIO</code> we need to set the directory that we want to work with. We could do this in code with something like:</p>\n<pre><code>val myWorkingDir = &quot;/some/path/to/where/my/files/are&quot;\nLocalIO.setWorkingDir(myWorkingDir)\n</code></pre>\n<p>Or we can get the path from a Note input as in the paragraph below</p>\n</div>"}]}},{"text":"val myWorkingDir = z.input(\"Working Directory:\",\"/notebook\").toString\nLocalIO.setWorkingDir(myWorkingDir)","user":"admin","dateUpdated":"2017-06-02T11:30:59+1000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{"directory":"/notebook","Working Directory:":"/notebook"},"forms":{"Working Directory:":{"name":"Working Directory:","displayName":"Working Directory:","type":"input","defaultValue":"/notebook","hidden":false,"$$hashKey":"object:16305"}}},"apps":[],"jobName":"paragraph_1496358251292_-1721692793","id":"20170602-081056_1988451187","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T11:30:59+1000","dateFinished":"2017-06-02T11:30:59+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15488"},{"title":" ","text":"%md\n#### Testing LocalIO\n\nNow that we have a LocalIO object with the working directory set, let's check that it actually works...","user":"admin","dateUpdated":"2017-06-02T13:56:55+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496366341540_-1000457016","id":"20170602-111901_1078290783","dateCreated":"2017-06-02T11:19:01+1000","dateStarted":"2017-06-02T13:56:55+1000","dateFinished":"2017-06-02T13:56:55+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15489","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Testing LocalIO</h4>\n<p>Now that we have a LocalIO object with the working directory set, let&rsquo;s check that it actually works&hellip;</p>\n</div>"}]}},{"text":"//List the files in the current working directory\nprintln(LocalIO.workingDirFiles)","user":"admin","dateUpdated":"2017-06-02T11:38:14+1000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251299_-1735159005","id":"20170601-224313_1550523056","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T11:38:14+1000","dateFinished":"2017-06-02T11:38:14+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15490"},{"text":"%md\n\nNote that we get a list of files, but they are not what we might normally call files because the list includes hidden files (names starting with \".\").\n\nThe list also includes subdirectories, which are also files on a unix system.\n\nSo let's try and get something more people friendly by only showing the visible files that are not directories.","user":"admin","dateUpdated":"2017-06-02T13:58:18+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496366565451_708333798","id":"20170602-112245_1919778788","dateCreated":"2017-06-02T11:22:45+1000","dateStarted":"2017-06-02T13:57:02+1000","dateFinished":"2017-06-02T13:57:02+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15491","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Note that we get a list of files, but they are not what we might normally call files because the list includes hidden files (names starting with &ldquo;.&rdquo;).</p>\n<p>The list also includes subdirectories, which are also files on a unix system.</p>\n<p>So let&rsquo;s try and get something more people friendly by only showing the visible files that are not directories.</p>\n</div>"}]}},{"text":"\n//We're only interested in the visible ones\nval dirList = LocalIO.workingDirFiles\nval actualFiles = dirList.filter(LocalIO.visibleFile).filter(LocalIO.notDirectory)\n\n//To make the output even more people friendly,let's display it as a table.\n//First we need to format the data so that we can save it as a table\n\nval tabulated = actualFiles.zipWithIndex.map{ case (a,b) => b+\"\\t\"+a.getName }.mkString(\"\\n\")","user":"admin","dateUpdated":"2017-06-02T12:17:46+1000","config":{"colWidth":6,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251313_-1729772520","id":"20170602-081016_1453892691","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T12:17:27+1000","dateFinished":"2017-06-02T12:17:28+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15492"},{"text":"print(s\"\"\"%table idx\\tname\\n$tabulated\"\"\")","user":"admin","dateUpdated":"2017-06-02T12:17:51+1000","config":{"colWidth":6,"editorMode":"ace/mode/scala","results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"name","index":1,"aggr":"sum"}],"groups":[],"values":[{"name":"idx","index":0,"aggr":"sum"}]},"helium":{}}},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251314_-1728618273","id":"20170602-075911_1566490388","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T11:40:38+1000","dateFinished":"2017-06-02T11:40:38+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15493"},{"text":"%md\n#### Read in a file\n\nFor most of this workshop, we will need to actually read in a file to perform analytics on it.\n\nThere is an example text file in the `input_files` directory inside the working directory.\n\nWe can use the `inputFileDir` property together with the `listFiles` method to get a list of the files in this directory. However, we're really only interested in text files, so we also need to filter out the others using the filter function `textFile`.\n\nOnce we have the list, let's read in the pharmacy sample file.","user":"admin","dateUpdated":"2017-06-02T13:58:31+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496369911119_-32731454","id":"20170602-121831_2069621769","dateCreated":"2017-06-02T12:18:31+1000","dateStarted":"2017-06-02T13:57:08+1000","dateFinished":"2017-06-02T13:57:08+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15494","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Read in a file</h4>\n<p>For most of this workshop, we will need to actually read in a file to perform analytics on it.</p>\n<p>There is an example text file in the <code>input_files</code> directory inside the working directory.</p>\n<p>We can use the <code>inputFileDir</code> property together with the <code>listFiles</code> method to get a list of the files in this directory. However, we&rsquo;re really only interested in text files, so we also need to filter out the others using the filter function <code>textFile</code>.</p>\n<p>Once we have the list, let&rsquo;s read in the pharmacy sample file.</p>\n</div>"}]}},{"text":"//List the files in the input_files directory\nprintln(LocalIO.listFiles(LocalIO.inputFileDir))","user":"admin","dateUpdated":"2017-06-02T12:25:32+1000","config":{"colWidth":6,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496370141026_1705116386","id":"20170602-122221_281986634","dateCreated":"2017-06-02T12:22:21+1000","dateStarted":"2017-06-02T12:25:32+1000","dateFinished":"2017-06-02T12:25:32+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15495"},{"text":"//What text files are available in the input directory?\nval inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n\n//Open and show the first file in the input directory\nval pharmacySample = LocalIO.readFile(inputTextFiles.find(_.getName.contains(\"pharm\")).get)","user":"admin","dateUpdated":"2017-06-02T12:35:05+1000","config":{"colWidth":6,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251314_-1728618273","id":"20170601-224347_361947816","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T12:35:05+1000","dateFinished":"2017-06-02T12:35:05+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15496"},{"text":"//Print the text\nprint(pharmacySample)","user":"admin","dateUpdated":"2017-06-02T12:36:10+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496370941345_2118858251","id":"20170602-123541_472407495","dateCreated":"2017-06-02T12:35:41+1000","dateStarted":"2017-06-02T12:36:10+1000","dateFinished":"2017-06-02T12:36:10+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15497"},{"text":"%md\n\n#### The TapIO class\n\nThe `TapIO` class provides access to the Text Analytics Pipeline (TAP). It includes:\n- Common properties such as Urls\n- Common TAP methods for connecting to TAP, and sending and receiving data\n\nDisplay the code for `TapIO` by clicking the `Show editor` icon in the paragraph below. Then run the paragraph to define it.\n\nWhen you run the paragraph with this code, it compiles the code and defines a class called `TapIO` - you should see a result: `defined class TapIO`.","user":"admin","dateUpdated":"2017-06-02T13:59:03+1000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251316_-1730926767","id":"20170601-224444_458792828","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T13:59:03+1000","dateFinished":"2017-06-02T13:59:03+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15498","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>The TapIO class</h4>\n<p>The <code>TapIO</code> class provides access to the Text Analytics Pipeline (TAP). It includes:<br/>- Common properties such as Urls<br/>- Common TAP methods for connecting to TAP, and sending and receiving data</p>\n<p>Display the code for <code>TapIO</code> by clicking the <code>Show editor</code> icon in the paragraph below. Then run the paragraph to define it.</p>\n<p>When you run the paragraph with this code, it compiles the code and defines a class called <code>TapIO</code> - you should see a result: <code>defined class TapIO</code>.</p>\n</div>"}]}},{"title":"TapIO","text":"//A class to hold messages from the server\ncase class Message(message:String)\n\n//The TapIO class\ncase class TapIO(server:String = \"http://localhost:8080\") {\n    \n    //Import some helper libraries\n    import scalaj.http._    // to manage http connection to TAP\n    import org.json4s._     // to serialise and deserialise JSON\n    import org.json4s.jackson.Serialization\n    import org.json4s.jackson.Serialization.{read, write}\n    \n    implicit val defaultFormats = Serialization.formats(NoTypeHints)\n    \n    val API_VERSION = \"v1\"\n    lazy val API_URL = server+\"/\"+API_VERSION\n    lazy val HEALTH_URL = API_URL+\"/health\"\n\n    def serverDetails = Http(API_URL).asString\n\n    def getHealthMessage(debug:Boolean = false) = {\n        println(s\"Connecting to $HEALTH_URL\")\n        val response = Http(HEALTH_URL).asString\n        if(debug) println(response)\n        read[Message](response.body)\n    }\n\n    def serverIsHealthy = {\n        try { getHealthMessage().message==\"ok\" }\n        catch { case e:Exception => {\n                println(s\"There was a problem with the server: $e\")\n                false }\n        }\n    }\n}","user":"admin","dateUpdated":"2017-06-02T13:47:23+1000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"},"title":true,"lineNumbers":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251317_-1731311516","id":"20170601-224522_1857135480","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T13:46:36+1000","dateFinished":"2017-06-02T13:46:37+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15499"},{"text":"%md\nBy default TapIO connects to a local version of TAP. For this workshop, before we can use `TapIO` we need to set the TAP server that we want to connect to. We could do this in code with something like:\n```\nval myTapUrl = \"http://myTapServer.org\"\nval tapServer = TapIO(myTapUrl)\n```\nThis creates an object `tapServer` that is an instance of the class `TapIO` with URLs set to `myTapUrl`. Alternatively, we can get the server URL from a Note input as in the paragraph below","user":"admin","dateUpdated":"2017-06-02T13:59:09+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496371815989_1357124948","id":"20170602-125015_1641676560","dateCreated":"2017-06-02T12:50:15+1000","dateStarted":"2017-06-02T13:59:09+1000","dateFinished":"2017-06-02T13:59:09+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15500","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>By default TapIO connects to a local version of TAP. For this workshop, before we can use <code>TapIO</code> we need to set the TAP server that we want to connect to. We could do this in code with something like:</p>\n<pre><code>val myTapUrl = &quot;http://myTapServer.org&quot;\nval tapServer = TapIO(myTapUrl)\n</code></pre>\n<p>This creates an object <code>tapServer</code> that is an instance of the class <code>TapIO</code> with URLs set to <code>myTapUrl</code>. Alternatively, we can get the server URL from a Note input as in the paragraph below</p>\n</div>"}]}},{"text":"val myTapUrl = z.input(\"TAP Server URL:\",\"http://localhost:8088\").toString\nval tapServer = TapIO(myTapUrl)","user":"admin","dateUpdated":"2017-06-02T13:46:56+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{"TAP Server:":"http://localhost:8081","TAP Server URL:":"http://localhost:8080"},"forms":{"TAP Server URL:":{"name":"TAP Server URL:","displayName":"TAP Server URL:","type":"input","defaultValue":"http://localhost:8088","hidden":false,"$$hashKey":"object:16728"}}},"apps":[],"jobName":"paragraph_1496372105784_-724936885","id":"20170602-125505_1541699339","dateCreated":"2017-06-02T12:55:05+1000","dateStarted":"2017-06-02T13:46:56+1000","dateFinished":"2017-06-02T13:46:56+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15501"},{"text":"%md\n#### Testing TapIO\n\nNote that TapIO is setup, we can check if it is working properly by asking the server if it is healthy...","user":"admin","dateUpdated":"2017-06-02T13:59:13+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496372198303_-1198624078","id":"20170602-125638_1396849969","dateCreated":"2017-06-02T12:56:38+1000","dateStarted":"2017-06-02T13:59:13+1000","dateFinished":"2017-06-02T13:59:13+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15502","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Testing TapIO</h4>\n<p>Note that TapIO is setup, we can check if it is working properly by asking the server if it is healthy&hellip;</p>\n</div>"}]}},{"text":"println(tapServer.serverIsHealthy)","user":"admin","dateUpdated":"2017-06-02T13:45:59+1000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251318_-1730157269","id":"20170601-224719_593275079","dateCreated":"2017-06-02T09:04:11+1000","dateStarted":"2017-06-02T13:45:59+1000","dateFinished":"2017-06-02T13:46:00+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15503"},{"text":"//To see the actual message back from the server\ntapServer.getHealthMessage(true)","user":"admin","dateUpdated":"2017-06-02T13:47:03+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496372722401_-615206304","id":"20170602-130522_1365374500","dateCreated":"2017-06-02T13:05:22+1000","dateStarted":"2017-06-02T13:47:03+1000","dateFinished":"2017-06-02T13:47:03+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15504"},{"text":"","user":"admin","dateUpdated":"2017-06-02T09:08:36+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496358251342_-1751703207","id":"20170601-225134_590399828","dateCreated":"2017-06-02T09:04:11+1000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15505"}],"name":"01 Getting Started","id":"2CJHYNQ5P","angularObjects":{"2CHGWK3QR:shared_process":[],"2CGWV1MGK:shared_process":[],"2CGJUBZ7V:shared_process":[],"2CFA6A5V1:shared_process":[],"2CEG2J2DN:shared_process":[],"2CEHG1843:shared_process":[],"2CFKZEYRE:shared_process":[],"2CHBDJGUA:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}