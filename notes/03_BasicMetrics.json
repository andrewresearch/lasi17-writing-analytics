{
	"paragraphs": [
		{
			"text": "%md\n> Discuss this session online in the [LASI-17 Room](https://gitter.im/writing-analytics/LASI-17) of the Gitter [Writing Analytics Community](https://gitter.im/writing-analytics).",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:22+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/markdown",
				"colWidth": 12,
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<blockquote>\n  <p>Discuss this session online in the <a href=\"https://gitter.im/writing-analytics/LASI-17\">LASI-17 Room</a> of the Gitter <a href=\"https://gitter.im/writing-analytics\">Writing Analytics Community</a>.</p>\n</blockquote>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969666_1534130052",
			"id": "20170602-152031_858551274",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:22+0000",
			"dateFinished": "2017-06-09T13:52:22+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"focus": true,
			"$$hashKey": "object:11493"
		},
		{
			"title": "Load libraries",
			"text": "//%spark.dep\n//Dependencies\n//z.load(\"org.apache.commons:commons-math3:3.6.1\")\nimport org.apache.commons.math3.stat.descriptive._",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:22+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": false
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\nimport org.apache.commons.math3.stat.descriptive._\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969666_1534130052",
			"id": "20170603-113537_1599598889",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:22+0000",
			"dateFinished": "2017-06-09T13:52:22+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11494"
		},
		{
			"title": "Define classes and objects",
			"text": "//Access Local Filesystem\n\nobject LocalIO {\n    \n    import java.io.File\n    import scala.io.Source\n    \n    val IN_DIR_NAME = \"/input_files\"\n    val OUT_DIR_NAME = \"/output_files\"\n    \n    private val _thisDir:String = new File(\".\").getCanonicalPath\n    private var _workingDir:String = _thisDir\n\n    lazy val inputFileDir = _workingDir+IN_DIR_NAME\n    lazy val outputFileDir = _workingDir+OUT_DIR_NAME\n    \n    val visibleFile = (file:File) => !file.isHidden\n    val notDirectory = (file:File) => !file.isDirectory\n    val textFile = (file:File) => file.getName.split('.').last.contains(\"txt\")\n    \n    def setWorkingDir(directoryPath:String) = {\n        println(s\"Setting the working directory to: $directoryPath\")\n        this._workingDir = directoryPath\n    }\n    \n    def directoryFromString(directory:String):Option[File] = {\n         val newDir = new File(directory)\n         if (newDir.exists && newDir.isDirectory) Some(newDir)\n         else None\n    }\n    \n    def listFiles(directory:String):List[File] = {\n        directoryFromString(directory) match {\n            case Some(dir) => dir.listFiles.toList\n            case None => List[File]()\n        }\n    }\n    \n    def workingDirFiles = listFiles(_workingDir)\n    \n    def readFile(file:File) = {\n        val source = Source.fromFile(file.getCanonicalPath)\n        try {\n            source.getLines.mkString(\"\\n\\n\")\n        } finally {\n            source.close\n        }\n    }\n}\n\n//Classes for TAP data\ncase class Message(message:String)\n  //type Results[T] = List[T]\n  case class Result[T](message:String,results:T)\n  case class Tags(lemmas:List[String] = List(),posTags:List[String] = List())\n  case class Sentence(text:String,tokens:List[String],tags:Tags = Tags())\n  case class Section(sentences:List[Sentence])\n  case class Document(sections:List[Section])\n  type Vocab = Map[String,List[String]]\n\n//The TapIO class\ncase class TapIO(server:String = \"http://localhost:8080\") {\n    \n    //Import some helper libraries\n    import scalaj.http._    // to manage http connection to TAP\n    import org.json4s._     // to serialise and deserialise JSON\n    import org.json4s.jackson.Serialization\n    import org.json4s.jackson.Serialization.{read, write}\n    \n    implicit val defaultFormats = Serialization.formats(NoTypeHints)\n    \n    val API_VERSION = \"v1\"\n    lazy val API_URL = server+\"/\"+API_VERSION\n    lazy val HEALTH_URL = API_URL+\"/health\"\n    lazy val CLEAN_URL = API_URL+\"/analyse/text/clean\"\n    lazy val STRUCTURE_URL = API_URL+\"/analyse/text/structure\"\n    lazy val VOCAB_URL = API_URL+\"/analyse/text/vocab\"\n    \n    def serverDetails = Http(API_URL).asString\n\n    def getHealthMessage(debug:Boolean = false) = {\n        println(s\"Connecting to $HEALTH_URL\")\n        val response = Http(HEALTH_URL).asString\n        if(debug) println(response)\n        read[Message](response.body)\n    }\n\n    def serverIsHealthy = {\n        try { getHealthMessage().message==\"ok\" }\n        catch { case e:Exception => {\n                println(s\"There was a problem with the server: $e\")\n                false }\n        }\n    }\n    \n    def cleanText(text:String) = {\n    //println(s\"Cleaning text: $text\")\n    val response = Http(CLEAN_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[List[String]]](response.body)\n  }\n\n  def getStructure(text:String) = {\n    //println(s\"Getting structure for text: $text\")\n    val response = Http(STRUCTURE_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[Document]](response.body)\n  }\n  \n  def getVocab(text:String) = {\n    //println(s\"Getting structure for text: $text\")\n    val response = Http(VOCAB_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response.body)\n    read[Result[Vocab]](response.body) \n  }\n}\n\nobject S3Files {\n     //Import some helper libraries\n    import scalaj.http._    // to manage http connection to TAP\n    def get(name:String) = Http(\"http://lasi-working-files.s3-website-ap-southeast-2.amazonaws.com/\"+name).asString.body\n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:22+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\ndefined object LocalIO\n\ndefined class Message\n\ndefined class Result\n\ndefined class Tags\n\ndefined class Sentence\n\ndefined class Section\n\ndefined class Document\n\ndefined type alias Vocab\n\n\ndefined class TapIO\ndefined object S3Files\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969667_1533745303",
			"id": "20170602-152308_1200100722",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:22+0000",
			"dateFinished": "2017-06-09T13:52:26+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11495"
		},
		{
			"title": "Initialise with settings",
			"text": "LocalIO.setWorkingDir(\"/notebook\")\nval tapServer = TapIO(\"https://b9yiddda69.execute-api.ap-southeast-2.amazonaws.com/lasi\")",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:22+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "Setting the working directory to: /notebook\n\ntapServer: TapIO = TapIO(https://b9yiddda69.execute-api.ap-southeast-2.amazonaws.com/lasi)\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969667_1533745303",
			"id": "20170605-041818_269759440",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:23+0000",
			"dateFinished": "2017-06-09T13:52:26+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11496"
		},
		{
			"title": "Define functions",
			"text": "def getDocument(name:String,location:String=\"local\") = try {\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = location match {\n        case \"S3\" => S3Files.get(name)\n        case \"local\" => LocalIO.readFile(inputTextFiles.find(_.getName.contains(name)).get)\n        case _ => \"\"\n    }\n    Some(tapServer.getStructure(text).results)\n} catch {\n    case(e:Exception) => {\n        println(s\"ERROR: There was a problem reading the file ($name). $e\")\n        None\n    }\n}\n\n\ndef histogram(input:List[Int],bins:Int,min:Option[Int]=None,max:Option[Int]=None): List[Int] = {\n  val rangeMin = min.getOrElse(input.min).toDouble\n  val binWidth = (max.getOrElse(input.max).toDouble - rangeMin)/bins\n\n  def upper(c:Int) = rangeMin+(binWidth*c)\n\n  def histogramBuilder(inputList:List[Int],count:Int=1,histogram:List[Int]=List()): List[Int] = {\n    val lists = inputList.partition(_ <= upper(count))\n    val newHist = histogram :+ lists._1.length\n    if (newHist.length == bins) newHist\n    else histogramBuilder(lists._2,count+1,newHist)\n  }\n\n  histogramBuilder(input)\n}\n\ndef histogramDbl(input:List[Double],bins:Int,min:Option[Double]=None,max:Option[Double]=None): List[Int] = {\n  val rangeMin = min.getOrElse(input.min)\n  val binWidth = (max.getOrElse(input.max) - rangeMin)/bins\n\n  def upper(c:Double) = rangeMin+(binWidth*c)\n\n  def histogramBuilder(inputList:List[Double],count:Int=1,histogram:List[Int]=List()): List[Int] = {\n    val lists = inputList.partition(_ <= upper(count))\n    val newHist:List[Int] = histogram :+ lists._1.length\n    if (newHist.length == bins) newHist\n    else histogramBuilder(lists._2,count+1,newHist)\n  }\n\n  histogramBuilder(input)\n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:22+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\ngetDocument: (name: String, location: String)Option[Document]\n\nhistogram: (input: List[Int], bins: Int, min: Option[Int], max: Option[Int])List[Int]\n\nhistogramDbl: (input: List[Double], bins: Int, min: Option[Double], max: Option[Double])List[Int]\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969667_1533745303",
			"id": "20170602-190327_405229290",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:26+0000",
			"dateFinished": "2017-06-09T13:52:27+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11497"
		},
		{
			"title": "Counting",
			"text": "%md\n\n- How can counting be helpful?\n- How can counting be unhelpful?\n- How do we tell the difference?\n\n#### What kind of metrics might we find in unstructured text?\n\n- Word metrics\n- Sentence metrics\n- Document metrics\n- ???\n \n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/markdown",
				"colWidth": 12,
				"editorHide": true,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<ul>\n  <li>How can counting be helpful?</li>\n  <li>How can counting be unhelpful?</li>\n  <li>How do we tell the difference?</li>\n</ul>\n<h4>What kind of metrics might we find in unstructured text?</h4>\n<ul>\n  <li>Word metrics</li>\n  <li>Sentence metrics</li>\n  <li>Document metrics</li>\n  <li>???</li>\n</ul>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969667_1533745303",
			"id": "20170602-185627_1697943720",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:23+0000",
			"dateFinished": "2017-06-09T13:52:23+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11498"
		},
		{
			"title": "Document structure",
			"text": "//Before we do anything else, we need to get the structure for unstructured text\n val doc = getDocument(\"pharm-sample.txt\",\"S3\").getOrElse(Document(List()))",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "doc: Document = Document(List(Section(List(Sentence(Before I went on placement in XXXX in the Summer break, I didnt know how much the pharmacy means in the day-to-day life of the average elderly person, but also how important HMR is, and how it can save lives.,List(before, i, went, on, placement, in, xxxx, in, the, summer, break, ,, i, didnt, know, how, much, the, pharmacy, means, in, the, day-to-day, life, of, the, average, elderly, person, ,, but, also, how, important, hmr, is, ,, and, how, it, can, save, lives, .),Tags(List(),List(IN, PRP, VBD, IN, NN, IN, NNP, IN, DT, NNP, NN, ,, PRP, VBP, VB, WRB, JJ, DT, NN, VBZ, IN, DT, JJ, NN, IN, DT, JJ, JJ, NN, ,, CC, RB, WRB, JJ, NNP, VBZ, ,, CC, WRB, PRP, MD, VB, NNS, .))), Sentence(I was familiar with the usual aspects of being older: more ..."
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969668_1531821559",
			"id": "20170602-195817_1620842697",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:27+0000",
			"dateFinished": "2017-06-09T13:52:28+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11499"
		},
		{
			"title": "Basic Document Counts",
			"text": "{ \n    //Get the counts\n    val numSections = doc.sections.length\n    val numSentences = doc.sections.map(_.sentences.length).reduce(_+_)\n    val numTokens = doc.sections.flatMap(_.sentences.map(_.tokens.length)).reduce(_+_)\n    \n    //Calc averages\n    val avgSentPerSect = numSentences/numSections.toDouble\n    val avgTokPerSect = numTokens/numSections.toDouble\n    val avgTokPerSent = numTokens/numSentences.toDouble\n\n    //How many chunks?\n    println(s\"Number of sections: $numSections\")\n    println(s\"Number of sentences: $numSentences\")\n    println(s\"Number of tokens: $numTokens\")\n    \n    //Basic averages?\n    println(f\"Average sentences per section: $avgSentPerSect%1.1f\")\n    println(f\"Average tokens per section: $avgTokPerSect%1.1f\")\n    println(f\"Average tokens per sentence: $avgTokPerSent%1.1f\")\n    \n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "Number of sections: 1\nNumber of sentences: 22\nNumber of tokens: 786\nAverage sentences per section: 22.0\nAverage tokens per section: 786.0\nAverage tokens per sentence: 35.7\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969668_1531821559",
			"id": "20170602-185705_651831803",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:27+0000",
			"dateFinished": "2017-06-09T13:52:28+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11500"
		},
		{
			"text": "%md\nThese simple metrics would allow us to compare documents based on their sizes.\nHowever, if we look at the metrics inside a document we can get some more interesting insights.\nAs an example, let's take a look at sentence length of the course of a document.",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/markdown",
				"colWidth": 12,
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<p>These simple metrics would allow us to compare documents based on their sizes.<br/>However, if we look at the metrics inside a document we can get some more interesting insights.<br/>As an example, let&rsquo;s take a look at sentence length of the course of a document.</p>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969668_1531821559",
			"id": "20170602-153056_702537100",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:23+0000",
			"dateFinished": "2017-06-09T13:52:23+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11501"
		},
		{
			"title": "Sentence length",
			"text": "{\n    val sentences = doc.sections.flatMap(_.sentences)\n    //get the number of tokens for each sentence (numbered 1 to 22)\n    val tokenCounts = sentences.zipWithIndex.map { case(sent,idx) =>\n        (idx+1,sent.tokens.length)\n    }\n    //format ready for graphing\n    val rowFormatter = (t:(Int,Int)) => s\"${t._1}\\t${t._2}\\n\"\n\n    val formatted = tokenCounts.map(rowFormatter)\n    \n    println(s\"%table sentence\\ttokenCount\\n$formatted\")\n    \n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
					"0": {
						"graph": {
							"mode": "scatterChart",
							"height": 300,
							"optionOpen": false,
							"setting": {
								"multiBarChart": {
									"stacked": false
								}
							},
							"commonSetting": {
							},
							"keys": [
								{
									"name": "List(1",
									"index": 0,
									"aggr": "sum"
								}
							],
							"groups": [

							],
							"values": [
								{
									"name": "44",
									"index": 1,
									"aggr": "sum"
								}
							]
						},
						"helium": {
						}
					}
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TABLE",
						"data": "sentence\ttokenCount\nList(1\t44\n, 2\t63\n, 3\t35\n, 4\t63\n, 5\t33\n, 6\t69\n, 7\t30\n, 8\t35\n, 9\t20\n, 10\t37\n, 11\t34\n, 12\t30\n, 13\t29\n, 14\t31\n, 15\t32\n, 16\t25\n, 17\t54\n, 18\t28\n, 19\t23\n, 20\t12\n, 21\t32\n, 22\t27\n)\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969668_1531821559",
			"id": "20170602-153125_1340194947",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:28+0000",
			"dateFinished": "2017-06-09T13:52:28+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11502"
		},
		{
			"text": "//Let's take a closer look at the anomalous sentences (>50 and < 21)\nobject metrics {\n    val sentLengths = doc.sections.flatMap(_.sentences).map(snt => (snt.text,snt.tokens.length))\n}\n\n{\nval long = metrics.sentLengths.filter(_._2 > 50)\n\nval short = metrics.sentLengths.filter(_._2 < 21)\n\nlong.foreach(println(_))\nshort.foreach(println(_))\n}\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\ndefined object metrics\n(I was familiar with the usual aspects of being older: more medical conditions that leads to more medications which leads to more medications being forgotten and the vicious cycle that ensues, but to see how this actually played out in everyday practice, with the consequences that it entailed, was eye opening, sad and exciting all at once.,63)\n(No one could work out what it was, and it was only after placement when I rang to enquire as to how this gentleman was going for my case review that I found out that an HMR had been done (finally after multiple requests to the GP) and Mr DA had been intermittently taking fish oil without telling anyone.,63)\n(As a result his INR would go up and then his warfarin would need to change in his Webster pack that we would pack for him, and then he would forget to take the fish oil for a while and his INR would go down, and his warfarin dose would need to change again- It was IT1 week 3 Cardiovascular right in front of my eyes!,69)\n(However, the situation also brought back memories for me, of my father in his dementia having scripts filled with boxes of medications around the house after seeing the Dr and then forgetting to take the medications, and then repeating the process again next time he went back to see the GP.,54)\n(After all, medications are the same whether they are in the pharmacy or in the home.... Right?,20)\n(As a result, I have become a converted HMR advocate.,12)\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969668_1531821559",
			"id": "20170602-184715_680410316",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:29+0000",
			"dateFinished": "2017-06-09T13:52:29+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11503"
		},
		{
			"text": "%md\nCan we automate finding these anomalous sentences?\nLet's take a look at a histogram of these values.",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/markdown",
				"colWidth": 12,
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<p>Can we automate finding these anomalous sentences?<br/>Let&rsquo;s take a look at a histogram of these values.</p>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969668_1531821559",
			"id": "20170602-203902_1867889350",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:23+0000",
			"dateFinished": "2017-06-09T13:52:23+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11504"
		},
		{
			"title": "Histogram of sentence lengths",
			"text": "//List of sentenceLengths\nval lengths = metrics.sentLengths.map(_._2)\n\n//Histogram visualisation\n{\n    val hist = histogram(lengths,10,Some(1))\n    \n    val values = hist.zipWithIndex.map(t =>\"\"+(t._2+1)+\"\\t\"+t._1).mkString(\"\\n\")\n    \n    println(s\"%table bin\\tcount\\n$values\")\n}\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:23+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
					"1": {
						"graph": {
							"mode": "multiBarChart",
							"height": 300,
							"optionOpen": false
						},
						"helium": {
						}
					}
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\nlengths: List[Int] = List(44, 63, 35, 63, 33, 69, 30, 35, 20, 37, 34, 30, 29, 31, 32, 25, 54, 28, 23, 12, 32, 27)\n"
					},
					{
						"type": "TABLE",
						"data": "bin\tcount\n1\t0\n2\t1\n3\t1\n4\t4\n5\t10\n6\t1\n7\t1\n8\t1\n9\t0\n10\t3\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969669_1531436810",
			"id": "20170603-090326_1662165552",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:29+0000",
			"dateFinished": "2017-06-09T13:52:30+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11505"
		},
		{
			"text": "%md\nSo it looks like a normal curve with outliers in bin 10 (long sentences). This indicates that we may be able to automate the detection of these sentences using basic stats.",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/markdown",
				"colWidth": 12,
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<p>So it looks like a normal curve with outliers in bin 10 (long sentences). This indicates that we may be able to automate the detection of these sentences using basic stats.</p>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969669_1531436810",
			"id": "20170603-090418_2127047927",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:24+0000",
			"dateFinished": "2017-06-09T13:52:24+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11506"
		},
		{
			"title": "Descriptive stats to find outliers",
			"text": "//Get the descriptive stats for our lengths\nval stats = new DescriptiveStatistics(lengths.map(_.toDouble).toArray)",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": false
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\n\n\n\n\n\n\n\n\n\nstats: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics =\nDescriptiveStatistics:\nn: 22\nmin: 12.0\nmax: 69.0\nmean: 35.72727272727273\nstd dev: 14.465663180629198\nmedian: 32.0\nskewness: 1.0640491027368137\nkurtosis: 0.6894789202790443\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969670_1532591056",
			"id": "20170603-111313_1738853595",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:29+0000",
			"dateFinished": "2017-06-09T13:52:30+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11507"
		},
		{
			"text": "//Now use these to find our outlier sentences\n{\nval mean = stats.getMean()\nval stdDev = stats.getStandardDeviation()\n\nval upperThresh =  mean+(1.5*stdDev)\nval lowerThresh = mean-(1.5*stdDev)\n\ndef outlier(x:Int):Boolean = { lowerThresh > x || x > upperThresh }\n\nmetrics.sentLengths.filter(sl => outlier(sl._2)).foreach(println(_))\n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "(I was familiar with the usual aspects of being older: more medical conditions that leads to more medications which leads to more medications being forgotten and the vicious cycle that ensues, but to see how this actually played out in everyday practice, with the consequences that it entailed, was eye opening, sad and exciting all at once.,63)\n(No one could work out what it was, and it was only after placement when I rang to enquire as to how this gentleman was going for my case review that I found out that an HMR had been done (finally after multiple requests to the GP) and Mr DA had been intermittently taking fish oil without telling anyone.,63)\n(As a result his INR would go up and then his warfarin would need to change in his Webster pack that we would pack for him, and then he would forget to take the fish oil for a while and his INR would go down, and his warfarin dose would need to change again- It was IT1 week 3 Cardiovascular right in front of my eyes!,69)\n(As a result, I have become a converted HMR advocate.,12)\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969670_1532591056",
			"id": "20170603-113458_1251156011",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:30+0000",
			"dateFinished": "2017-06-09T13:52:31+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11508"
		},
		{
			"title": "Vocabulary",
			"text": "%md\nWe can sometimes gain insights into the writing by looking at the words that are used, how often they are used, and when they are used.\n\nAs an example, let's compare the overall vocabulary of the document with the vocabulary used in each section.\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/markdown",
				"colWidth": 12,
				"editorHide": true,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<p>We can sometimes gain insights into the writing by looking at the words that are used, how often they are used, and when they are used.</p>\n<p>As an example, let&rsquo;s compare the overall vocabulary of the document with the vocabulary used in each section.</p>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969670_1532591056",
			"id": "20170603-120148_71431368",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:24+0000",
			"dateFinished": "2017-06-09T13:52:24+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11509"
		},
		{
			"text": "val pharmText:String = S3Files.get(\"pharm-sample.txt\").replace(\"\\n\",\"\\n\\n\")\nval cleanText = tapServer.cleanText(pharmText).results\nprintln(\"Number of sections: \"+cleanText.length)\nval docVocab = tapServer.getVocab(cleanText.mkString(\"\\n\")).results\nval doc = tapServer.getStructure(pharmText).results\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": false
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\n\n\npharmText: String =\nBefore I went on placement in XXXX in the Summer break, I didn’t know how much the pharmacy means in the day-to-day life of the average elderly person, but also how important HMR is, and how it can save lives. I was familiar with the usual aspects of being older: more medical conditions that leads to more medications which leads to more medications being forgotten and the vicious cycle that ensues, but to see how this actually played out in everyday practice, with the consequences that it entailed, was eye opening, sad and exciting all at once.\n\nWe had one case of an elderly gentleman (and he really was a gentle man)- Mr DA, who had been baffling his doctors and the pharmacy for months about his fluctuating INR. No one could work out what it was, and it was only afte...cleanText: List[String] = List(Before I went on placement in XXXX in the Summer break, I didnt know how much the pharmacy means in the day-to-day life of the average elderly person, but also how important HMR is, and how it can save lives. I was familiar with the usual aspects of being older: more medical conditions that leads to more medications which leads to more medications being forgotten and the vicious cycle that ensues, but to see how this actually played out in everyday practice, with the consequences that it entailed, was eye opening, sad and exciting all at once., We had one case of an elderly gentleman (and he really was a gentle man)- Mr DA, who had been baffling his doctors and the pharmacy for months about his fluctuating INR. No one could work out what it was, and it was...Number of sections: 7\ndocVocab: Vocab = Map(12 -> List(his), 8 -> List(this, he), 4 -> List(is, medication, out, pharmacy, being, after, take, me, then, back, life, could, which, an, (, more), 15 -> List(that), 9 -> List(would, as), 22 -> List(and), 37 -> List(the), 13 -> List(was), 35 -> List(,), 16 -> List(.), 5 -> List(also, da, my, about, see), 6 -> List(medications, oil, fish, with, mr), 1 -> List(forgotten, ideas, eye, impairment, down, side, surprisingly, conditions, compounding, baffling, lead, lives, professional, infinitely, repeating, cupboard, seen, said, break, effects, am, familiar, cardiovascular, previously, whether, necessarily, best, packed, remember, another, front, weeks, if, dose, memories, problem, das, up, process, telling, rang, so, day-to-day, enquire, man), ...., challenged, him, un...doc: Document = Document(List(Section(List(Sentence(Before I went on placement in XXXX in the Summer break, I didnt know how much the pharmacy means in the day-to-day life of the average elderly person, but also how important HMR is, and how it can save lives.,List(before, i, went, on, placement, in, xxxx, in, the, summer, break, ,, i, didnt, know, how, much, the, pharmacy, means, in, the, day-to-day, life, of, the, average, elderly, person, ,, but, also, how, important, hmr, is, ,, and, how, it, can, save, lives, .),Tags(List(),List(IN, PRP, VBD, IN, NN, IN, NNP, IN, DT, NNP, NN, ,, PRP, VBP, VB, WRB, JJ, DT, NN, VBZ, IN, DT, JJ, NN, IN, DT, JJ, JJ, NN, ,, CC, RB, WRB, JJ, NNP, VBZ, ,, CC, WRB, PRP, MD, VB, NNS, .))), Sentence(I was familiar with the usual aspects of being older: more ..."
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969670_1532591056",
			"id": "20170603-122657_1972573287",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:30+0000",
			"dateFinished": "2017-06-09T13:52:32+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11510"
		},
		{
			"text": "val sectionVocab = cleanText.map(text => tapServer.getVocab(text).results)",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "sectionVocab: List[Vocab] = List(Map(4 -> List(in, how), 1 -> List(forgotten, eye, conditions, this, lives, once, is, break, familiar, day-to-day, all, played, consequences, ensues, before, summer, out, everyday, exciting, know, pharmacy, placement, at, older, also, can, on, entailed, usual, cycle, opening, actually, much, means, person, xxxx, life, aspects, medical, didnt, which, vicious, average, sad, :, save, see, important, elderly, practice, hmr, went), 2 -> List(medications, ., but, it, was, leads, being, with, of), 7 -> List(,, the), 3 -> List(i, that, to, more, and)), Map(8 -> List(and), 4 -> List(had, the), 5 -> List(for), 6 -> List(a, to, was), 1 -> List(down, baffling, review, this, bit, fluctuating, cardiovascular, best, webster, what, front, dose, up, going, telling, rang, ..."
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969670_1532591056",
			"id": "20170603-141347_717491510",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:31+0000",
			"dateFinished": "2017-06-09T13:52:32+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11511"
		},
		{
			"text": " val secWords = doc.sections.map(sec => sec.sentences.map( s => s.tokens.length).sum)",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\nsecWords: List[Int] = List(107, 200, 156, 147, 82, 23, 71)\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969671_1532206308",
			"id": "20170603-192734_1954170215",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:32+0000",
			"dateFinished": "2017-06-09T13:52:33+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11512"
		},
		{
			"title": "Unique words over document",
			"text": "//How many document unique words in each section?\n{\n    val docUnique = docVocab.get(\"1\").getOrElse(List()).toSet\n    val secUnique = sectionVocab.map(sec => sec.get(\"1\").getOrElse(List()).toSet.intersect(docUnique))\n    val printText = secUnique.zipWithIndex.zip(secWords).map(sec => \"\"+(sec._1._2+1)+\"\\t\"+f\"${(sec._1._1.size/sec._2.toDouble)}%1.2f\").mkString(\"\\n\")\n    println(s\"%table section\\tunique\\n$printText\")\n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
					"0": {
						"graph": {
							"mode": "lineChart",
							"height": 300,
							"optionOpen": false,
							"setting": {
								"stackedAreaChart": {
									"style": "stack"
								}
							},
							"commonSetting": {
							},
							"keys": [
								{
									"name": "section",
									"index": 0,
									"aggr": "sum"
								}
							],
							"groups": [

							],
							"values": [
								{
									"name": "unique",
									"index": 1,
									"aggr": "sum"
								}
							]
						},
						"helium": {
						}
					}
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TABLE",
						"data": "section\tunique\n1\t0.28\n2\t0.20\n3\t0.17\n4\t0.25\n5\t0.28\n6\t0.13\n7\t0.30\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969671_1532206308",
			"id": "20170603-190639_359977100",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:33+0000",
			"dateFinished": "2017-06-09T13:52:33+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11513"
		},
		{
			"title": "Difference in skew",
			"text": "def descriptiveStats(xs:List[Int]) = new DescriptiveStatistics(xs.map(_.toDouble).toArray)\n\ndef skewDiff = {\n    val docVocabStats  = {\n        val ds = descriptiveStats(docVocab.map(_._2.size).toList)\n        ds.getSkewness()\n    }\n\n    val secVocabStats = sectionVocab.map { sec =>\n        val ds = descriptiveStats(sec.map(_._2.size).toList)\n        //println(ds)\n        ds.getSkewness()\n    }\n\n    val skewDiffs = secVocabStats.map {sec => \n        if (sec.isNaN) docVocabStats\n        else docVocabStats - sec\n    }\n    skewDiffs.zipWithIndex.map(sec => \"\"+(sec._2+1)+\"\\t\"+f\"${sec._1}%1.2f\").mkString(\"\\n\")\n}\n\n\nprintln(s\"%table section\\tunique\\n$skewDiff\")\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:24+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
					"1": {
						"graph": {
							"mode": "lineChart",
							"height": 300,
							"optionOpen": false
						},
						"helium": {
						}
					}
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\ndescriptiveStats: (xs: List[Int])org.apache.commons.math3.stat.descriptive.DescriptiveStatistics\n\nskewDiff: String\n"
					},
					{
						"type": "TABLE",
						"data": "section\tunique\n1\t1.76\n2\t1.51\n3\t1.38\n4\t1.58\n5\t1.76\n6\t3.90\n7\t2.02\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969671_1532206308",
			"id": "20170603-130444_216388693",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:33+0000",
			"dateFinished": "2017-06-09T13:52:34+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11514"
		},
		{
			"text": "//Let's look at that section...\ncleanText(5)",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:25+0000",
			"config": {
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\nres42: String = It is another situation that an HMR will identify and report back to the doctor, and potentially save a life with.\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969671_1532206308",
			"id": "20170605-050238_1904972703",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:34+0000",
			"dateFinished": "2017-06-09T13:52:34+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11515"
		},
		{
			"title": "News story",
			"text": "//sourced from abc.net.au\n\nval news = \"\"\"\nPolice officers fired \"in the region of 50 rounds\" of ammunition when shooting dead the three terrorists responsible for killing seven people and injuring at least 48 in a vehicle and knife attack, according to London Metropolitan Police.\n\nInvestigators are beginning to establish a clearer picture of events surrounding the attack, in which a van mowed down pedestrians on London Bridge before three attackers got out and began stabbing people in pubs and restaurants.\nBritish Prime Minister Theresa May described the attack as part of a new trend of terrorism, declaring \"enough is enough\" and foreshadowing a raft of measures including a crackdown on extremists' access to the internet.\n\nSpeaking late on Sunday night (local time) London Metropolitan Police Assistant Commissioner Mark Rowley said the white Renault van used in the attack had been recently hired by one of the attackers.\n\"As we currently understand it, the van entered London Bridge at 21:58 travelling from the north to the south side of the river,\" Mr Rowley said.\n\"The van mounted the pavement, and collided with pedestrians before being abandoned, where the attackers, armed with knives, continued into the Borough Market area, stabbing numerous people.\n\"The attackers were then confronted by the firearms officers and I can confirm that eight police firearms officers discharged their weapons.\"\n\nHe said the details were still subject to investigation by the Independent Police Complaints Commission.\n\"Our initial assessment is that in the region of 50 rounds were discharged by eight officers. The three attackers were shot dead,\" he said.\n\"The situation these officers were confronted with was critical — a matter of life and death. Three armed men, wearing what appeared to be suicide belts, had already attacked and killed members of the public and had to be stopped immediately.\n\"Indeed I am not surprised that, faced with what they must have feared were three suicide bombers, the firearms officers fired an unprecedented number of rounds to be completely confident they had neutralised those threats.\n\"As the officers confronted the terrorists — and fired shots — a member of the public also suffered gunshot wounds. Although we do not believe the injuries to critical in nature, they are in hospital receiving medical attention.\"\n\nIbrahim Dag, a taxi driver, witnessed some of the moments that followed the brutal attack.\nHe stopped his car when he saw a young woman calling for help to save her injured boyfriend.\n\"She was telling the guy to keep breathing, and she was shouting for the ambulance and stuff, yelling at people to help them,\" Mr Dag said.\n\nRichard Angell, who was with friends in a nearby restaurant, said he saw someone walking out of the neighbouring restaurant, fully drenched in blood.\n\"What stays with me is the heroism of the emergency services … the ambulance services who have to turn their back on danger to protect the person in front of them, how people come together and work together to do it, and how people defy these cowardly acts,\" he said.\n\nCollege student Vashu Tyagi was leaving his dorm and heading to a nearby bar to celebrate the end of classes when he saw people running frantically down the street.\nAs three men with large knives stabbed anyone in their path, police yelled at Mr Tyagi and others to get back inside — an order he credits with saving his life.\n\nLondon's Metropolitan Police said officers were still working to inform the families of the seven dead victims.\nSo far a Canadian woman and a French citizen are known to be among the dead.\nNearly 50 injured people are currently receiving medical treatment in hospitals spread across the city.\nCordons remain in place near London Bridge and Borough Market and additional armed and unarmed police officers will be posted on the streets.\nThe SITE Intelligence Group said Islamic State's news agency was claiming terrorists from the extremist group carried out the attack.\n\"\"\"\n\nval news2 = \"\"\"\nFour Arab nations have cut diplomatic ties to Qatar, further deepening the rift between Gulf Arab nations over that country's support for Islamist groups.\nBahrain, Egypt, Saudi Arabia and the United Arab Emirates all announced they would withdraw their diplomatic staff from Qatar, a gas-rich nation that will host the 2022 FIFA World Cup.\n\nThe decision comes after Qatar alleged in late May that hackers took over the site of its state-run news agency and published what it called fake comments from its ruling emir about Iran and Israel.\nIts Gulf Arab neighbours responded with anger, blocking Qatari-based media, including the Doha-based satellite news network Al-Jazeera.\n\nBahrain blamed Qatar's \"media incitement, support for armed terrorist activities, and funding linked to Iranian groups to carry out sabotage and spreading chaos in Bahrain\" for its decision.\nSaudi Arabia said Qatari troops would be pulled from its ongoing war in Yemen.\n\nAll the nations also said they planned to cut air and sea traffic to the peninsular country.\nIt was not immediately clear how that would affect Qatar Airways, one of the region's major long-haul carriers.\nQatari officials did not immediately respond to a request for comment.\n\"\"\"",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T14:35:52+0000",
			"config": {
				"tableHide": true,
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\n\n\n\n\n\n\nnews: String =\n\"\nPolice officers fired \"in the region of 50 rounds\" of ammunition when shooting dead the three terrorists responsible for killing seven people and injuring at least 48 in a vehicle and knife attack, according to London Metropolitan Police.\n\nInvestigators are beginning to establish a clearer picture of events surrounding the attack, in which a van mowed down pedestrians on London Bridge before three attackers got out and began stabbing people in pubs and restaurants.\nBritish Prime Minister Theresa May described the attack as part of a new trend of terrorism, declaring \"enough is enough\" and foreshadowing a raft of measures including a crackdown on extremists' access to the internet.\n\nSpeaking late on Sunday night (local time) London Metropolitan Police Assistant Commissio...\n\n\n\n\n\n\n\nnews2: String =\n\"\nFour Arab nations have cut diplomatic ties to Qatar, further deepening the rift between Gulf Arab nations over that country's support for Islamist groups.\nBahrain, Egypt, Saudi Arabia and the United Arab Emirates all announced they would withdraw their diplomatic staff from Qatar, a gas-rich nation that will host the 2022 FIFA World Cup.\n\nThe decision comes after Qatar alleged in late May that hackers took over the site of its state-run news agency and published what it called fake comments from its ruling emir about Iran and Israel.\nIts Gulf Arab neighbours responded with anger, blocking Qatari-based media, including the Doha-based satellite news network Al-Jazeera.\n\nBahrain blamed Qatar's \"media incitement, support for armed terrorist activities, and funding linked t..."
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969672_1530282563",
			"id": "20170603-142929_294067635",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:34+0000",
			"dateFinished": "2017-06-09T13:52:34+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11516"
		},
		{
			"title": "News section uniqueness",
			"text": "def docUniqueness(text:String) = {\n    val cleanText = tapServer.cleanText(text).results\n    val docVocab = tapServer.getVocab(cleanText.mkString(\"\\n\")).results\n    val doc = tapServer.getStructure(text).results\n    val sectionVocab = cleanText.map(text => tapServer.getVocab(text).results)\n    val secWords = doc.sections.map(sec => sec.sentences.map( s => s.tokens.length).sum)\n    val docUnique = docVocab.get(\"1\").getOrElse(List()).toSet\n    val secUnique = sectionVocab.map(sec => sec.get(\"1\").getOrElse(List()).toSet.intersect(docUnique))\n     secUnique.zipWithIndex.zip(secWords).map(sec => \"\"+(sec._1._2+1)+\"\\t\"+f\"${(sec._1._1.size/sec._2.toDouble)}%1.2f\").mkString(\"\\n\")\n}\n{\n    val printText = docUniqueness(news)\n    println(s\"%table section\\tunique\\n$printText\")\n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:25+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
					"1": {
						"graph": {
							"mode": "lineChart",
							"height": 300,
							"optionOpen": false
						},
						"helium": {
						}
					}
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\ndocUniqueness: (text: String)String\n"
					},
					{
						"type": "TABLE",
						"data": "section\tunique\n1\t0.27\n2\t0.45\n3\t0.32\n4\t0.28\n5\t0.30\n6\t0.28\n7\t0.39\n8\t0.36\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969672_1530282563",
			"id": "20170603-195404_1221792724",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:34+0000",
			"dateFinished": "2017-06-09T13:52:35+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11517"
		},
		{
			"title": "News compare difference in skew",
			"text": "def skewDiffNews = {\n    val cleanText = tapServer.cleanText(news).results\n    val docVocab = tapServer.getVocab(cleanText.mkString(\"\\n\")).results\n     val doc = tapServer.getStructure(news).results\n    val sectionVocab = cleanText.map(text => tapServer.getVocab(text).results)\n    \n    val docVocabStats  = {\n        val ds = descriptiveStats(docVocab.map(_._2.size).toList)\n        ds.getSkewness()\n    }\n\n    val secVocabStats = sectionVocab.map { sec =>\n        val ds = descriptiveStats(sec.map(_._2.size).toList)\n        //println(ds)\n        ds.getSkewness()\n    }\n\n    val skewDiffs = secVocabStats.map {sec => \n        if (sec.isNaN) docVocabStats\n        else docVocabStats - sec\n    }\n    skewDiffs.zipWithIndex.map(sec => \"\"+(sec._2+1)+\"\\t\"+f\"${sec._1}%1.2f\").mkString(\"\\n\")\n}\n\n\nprintln(s\"%table section\\tunique\\n$skewDiffNews\")",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:25+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"title": true,
				"results": {
					"1": {
						"graph": {
							"mode": "lineChart",
							"height": 300,
							"optionOpen": false
						},
						"helium": {
						}
					}
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\nskewDiffNews: String\n"
					},
					{
						"type": "TABLE",
						"data": "section\tunique\n1\t3.97\n2\t1.79\n3\t1.41\n4\t1.30\n5\t1.99\n6\t2.13\n7\t2.36\n8\t1.93\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969672_1530282563",
			"id": "20170605-050834_103518315",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:34+0000",
			"dateFinished": "2017-06-09T13:52:36+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11518"
		},
		{
			"title": "Bridge Building",
			"text": "%md\n    * How could these be used pedagogically?\n    * What does the theory say?\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:25+0000",
			"config": {
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/markdown",
				"colWidth": 12,
				"editorHide": true,
				"title": true,
				"results": {
				},
				"enabled": true,
				"tableHide": false
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<ul>\n  <li>How could these be used pedagogically?\n    <ul>\n      <li>What does the theory say?</li>\n    </ul>\n  </li>\n</ul>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969672_1530282563",
			"id": "20170603-122054_1236470797",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"dateStarted": "2017-06-09T13:52:25+0000",
			"dateFinished": "2017-06-09T13:52:25+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11519"
		},
		{
			"title": "Load your own document and try",
			"text": "",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:52:25+0000",
			"config": {
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": true
				},
				"editorMode": "ace/mode/scala",
				"colWidth": 12,
				"title": true,
				"results": {
				},
				"enabled": true,
				"editorHide": false
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [

			],
			"jobName": "paragraph_1496739969672_1530282563",
			"id": "20170603-122703_1679835277",
			"dateCreated": "2017-06-06T09:06:09+0000",
			"status": "FINISHED",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:11520"
		}
	],
	"name": "03 Basic Metrics",
	"id": "2CHVKRRC7",
	"angularObjects": {
		"2CJYXMTXA:shared_process": [

		],
		"2CJR68XDB:shared_process": [

		],
		"2CMG2JQR4:shared_process": [

		],
		"2CKJMGPT7:shared_process": [

		],
		"2CJYK3Q31:shared_process": [

		],
		"2CJY6S2UM:shared_process": [

		],
		"2CJXEN14Y:shared_process": [

		]
	},
	"config": {
		"looknfeel": "default",
		"personalizedMode": "false"
	},
	"info": {
	}
}