{
	"paragraphs": [
		{
			"text": "%md\n> Discuss this session online in the [LASI-17 Room](https://gitter.im/writing-analytics/LASI-17) of the Gitter [Writing Analytics Community](https://gitter.im/writing-analytics).",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:39+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"colWidth": 12,
				"editorMode": "ace/mode/markdown",
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<blockquote>\n  <p>Discuss this session online in the <a href=\"https://gitter.im/writing-analytics/LASI-17\">LASI-17 Room</a> of the Gitter <a href=\"https://gitter.im/writing-analytics\">Writing Analytics Community</a>.</p>\n</blockquote>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940286_-270372938",
			"id": "20170602-152031_858551274",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:39+0000",
			"dateFinished": "2017-06-09T13:47:39+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"focus": true,
			"$$hashKey": "object:10193"
		},
		{
			"title": "Load support resources",
			"text": "//Access Local Filesystem\n\nobject LocalIO {\n    \n    import java.io.File\n    import scala.io.Source\n    \n    val IN_DIR_NAME = \"/input_files\"\n    val OUT_DIR_NAME = \"/output_files\"\n    \n    private val _thisDir:String = new File(\".\").getCanonicalPath\n    private var _workingDir:String = _thisDir\n\n    lazy val inputFileDir = _workingDir+IN_DIR_NAME\n    lazy val outputFileDir = _workingDir+OUT_DIR_NAME\n    \n    val visibleFile = (file:File) => !file.isHidden\n    val notDirectory = (file:File) => !file.isDirectory\n    val textFile = (file:File) => file.getName.split('.').last.contains(\"txt\")\n    \n    def setWorkingDir(directoryPath:String) = {\n        println(s\"Setting the working directory to: $directoryPath\")\n        this._workingDir = directoryPath\n    }\n    \n    def directoryFromString(directory:String):Option[File] = {\n         val newDir = new File(directory)\n         if (newDir.exists && newDir.isDirectory) Some(newDir)\n         else None\n    }\n    \n    def listFiles(directory:String):List[File] = {\n        directoryFromString(directory) match {\n            case Some(dir) => dir.listFiles.toList\n            case None => List[File]()\n        }\n    }\n    \n    def workingDirFiles = listFiles(_workingDir)\n    \n    def readFile(file:File) = {\n        val source = Source.fromFile(file.getCanonicalPath)\n        try {\n            source.getLines.mkString(\"\\n\\n\")\n        } finally {\n            source.close\n        }\n    }\n}\n\n//Classes for TAP data\ncase class Message(message:String)\n  //type Results[T] = List[T]\n  case class Result[T](message:String,results:T)\n  case class Tags(lemmas:List[String] = List(),posTags:List[String] = List())\n  case class Sentence(text:String,tokens:List[String],tags:Tags = Tags())\n  case class Section(sentences:List[Sentence])\n  case class Document(sections:List[Section])\n\n//The TapIO class\ncase class TapIO(server:String = \"http://localhost:8080\") {\n    \n    //Import some helper libraries\n    import scalaj.http._    // to manage http connection to TAP\n    import org.json4s._     // to serialise and deserialise JSON\n    import org.json4s.jackson.Serialization\n    import org.json4s.jackson.Serialization.{read, write}\n    \n    implicit val defaultFormats = Serialization.formats(NoTypeHints)\n    \n    val API_VERSION = \"v1\"\n    lazy val API_URL = server+\"/\"+API_VERSION\n    lazy val HEALTH_URL = API_URL+\"/health\"\n    lazy val CLEAN_URL = API_URL+\"/analyse/text/clean\"\n    lazy val STRUCTURE_URL = API_URL+\"/analyse/text/structure\"\n    \n    def serverDetails = Http(API_URL).asString\n\n    def getHealthMessage(debug:Boolean = false) = {\n        println(s\"Connecting to $HEALTH_URL\")\n        val response = Http(HEALTH_URL).asString\n        if(debug) println(response)\n        read[Message](response.body)\n    }\n\n    def serverIsHealthy = {\n        try { getHealthMessage().message==\"ok\" }\n        catch { case e:Exception => {\n                println(s\"There was a problem with the server: $e\")\n                false }\n        }\n    }\n    \n    def cleanText(text:String) = {\n    //println(s\"Cleaning text: $text\")\n    val response = Http(CLEAN_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[List[String]]](response.body)\n  }\n\n  def getStructure(text:String) = {\n    //println(s\"Getting structure for text: $text\")\n    val response = Http(STRUCTURE_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[Document]](response.body)\n  }\n}\n\nval tapApi = \"https://b9yiddda69.execute-api.ap-southeast-2.amazonaws.com/lasi\"\nval tapServer = TapIO(tapApi)\n\n\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:39+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\ndefined object LocalIO\n\ndefined class Message\n\ndefined class Result\n\ndefined class Tags\n\ndefined class Sentence\n\ndefined class Section\n\ndefined class Document\n\ndefined class TapIO\n\ntapApi: String = https://b9yiddda69.execute-api.ap-southeast-2.amazonaws.com/lasi\n\ntapServer: TapIO = TapIO(https://b9yiddda69.execute-api.ap-southeast-2.amazonaws.com/lasi)\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940286_-270372938",
			"id": "20170602-152308_1200100722",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:39+0000",
			"dateFinished": "2017-06-09T13:47:42+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10194"
		},
		{
			"title": "Cleaning",
			"text": "%md\n- why is cleaning necessary?\n- why is cleaning a non-trivial task?\n- what are the dangers in the cleaning process?\n- How much control can you have over input?\n- How to interact with other systems, with large range of encodings and protocols?\n- What level of cleaning is needed for various algorithms?\n- Sometimes non-alphanumeric characters hold meaning (think lists, headings, section breaks). What to do?\n\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:39+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"editorHide": true,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<ul>\n  <li>why is cleaning necessary?</li>\n  <li>why is cleaning a non-trivial task?</li>\n  <li>what are the dangers in the cleaning process?</li>\n  <li>How much control can you have over input?</li>\n  <li>How to interact with other systems, with large range of encodings and protocols?</li>\n  <li>What level of cleaning is needed for various algorithms?</li>\n  <li>Sometimes non-alphanumeric characters hold meaning (think lists, headings, section breaks). What to do?</li>\n</ul>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940287_-270757687",
			"id": "20170602-152155_1815331056",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:40+0000",
			"dateFinished": "2017-06-09T13:47:40+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10195"
		},
		{
			"title": "TAP Cleaning",
			"text": "tapServer.cleanText(\"C¢¶£§le∆˙©an §••–me˙˚˙©\\n\\npl•§ea£¢¬˙se\").results\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\nres23: List[String] = List(Clean me, please)\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940287_-270757687",
			"id": "20170602-152231_784664054",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:40+0000",
			"dateFinished": "2017-06-09T13:47:43+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10196"
		},
		{
			"title": "Cleaning a file",
			"text": "%md\nLet's load something more substantial to clean - the file from the last notebook. By wrapping the work in a function (`pharmacyText`) and showing only the results of the function, we suppress all of the processing output. The function is also using `try,catch` to handle any errors that might arise trying to read the file. ",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"colWidth": 12,
				"editorMode": "ace/mode/markdown",
				"editorHide": true,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<p>Let&rsquo;s load something more substantial to clean - the file from the last notebook. By wrapping the work in a function (<code>pharmacyText</code>) and showing only the results of the function, we suppress all of the processing output. The function is also using <code>try,catch</code> to handle any errors that might arise trying to read the file.</p>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940287_-270757687",
			"id": "20170602-152935_2138789041",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:40+0000",
			"dateFinished": "2017-06-09T13:47:40+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10197"
		},
		{
			"text": "def pharmacyText = try {\n    //First, try and read in the file\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(\"pharm\")).get)\n    //Next, post the text to TAP for cleaning\n    val cleanedText = tapServer.cleanText(text).results\n    //If successful return the cleaned text\n    Some(cleanedText)\n} catch {\n    case(e:Exception) => {\n        println(s\"ERROR: There was a problem reading the file. $e\")\n        None\n    }\n}",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\npharmacyText: Option[List[String]]\nERROR: There was a problem reading the file. java.util.NoSuchElementException: None.get\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940287_-270757687",
			"id": "20170602-153056_702537100",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:43+0000",
			"dateFinished": "2017-06-09T13:47:43+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10198"
		},
		{
			"title": "Handling the unexpected",
			"text": "%md\nThe function `pharmacyText` returns an `Option[String]` which means that the result can either be a `String` or nothing. This is a way of avoiding problems with `null` values when we can't be certain that we will get the results we expect.\n\nThere are a number of ways of working with options. When we are just printing the result, `getOrElse` is a good approach. Because the results from TAP are a list of strings, we can also iterate over the list and print each string.\n\nHandling the unexpected in analytics is essential, otherwise we would spend the whole time fixing bugs rather than analysing data. Try this out by editing \"pharm\" in `pharmacyText` to something we know won't match. e.g.\n```\nval text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(\"noFileWithThisString\")).get)\n```\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"colWidth": 12,
				"editorMode": "ace/mode/markdown",
				"editorHide": true,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<p>The function <code>pharmacyText</code> returns an <code>Option[String]</code> which means that the result can either be a <code>String</code> or nothing. This is a way of avoiding problems with <code>null</code> values when we can&rsquo;t be certain that we will get the results we expect.</p>\n<p>There are a number of ways of working with options. When we are just printing the result, <code>getOrElse</code> is a good approach. Because the results from TAP are a list of strings, we can also iterate over the list and print each string.</p>\n<p>Handling the unexpected in analytics is essential, otherwise we would spend the whole time fixing bugs rather than analysing data. Try this out by editing &ldquo;pharm&rdquo; in <code>pharmacyText</code> to something we know won&rsquo;t match. e.g.</p>\n<pre><code>val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(&quot;noFileWithThisString&quot;)).get)\n</code></pre>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940293_-286917140",
			"id": "20170602-154144_1281390563",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:40+0000",
			"dateFinished": "2017-06-09T13:47:40+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10199"
		},
		{
			"text": "pharmacyText.getOrElse(List()).foreach(println(_))",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "ERROR: There was a problem reading the file. java.util.NoSuchElementException: None.get\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940294_-285762894",
			"id": "20170602-153125_1340194947",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:43+0000",
			"dateFinished": "2017-06-09T13:47:43+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10200"
		},
		{
			"title": "Finding structure in unstructured text",
			"text": "%md\n- chunking\n- tokenising\n- multiple approaches may be needed depending on what is ahead (i.e. different algorithms need different text input)",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"colWidth": 12,
				"editorMode": "ace/mode/markdown",
				"editorHide": true,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<ul>\n  <li>chunking</li>\n  <li>tokenising</li>\n  <li>multiple approaches may be needed depending on what is ahead (i.e. different algorithms need different text input)</li>\n</ul>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940294_-285762894",
			"id": "20170602-153558_1978224741",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:40+0000",
			"dateFinished": "2017-06-09T13:47:40+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10201"
		},
		{
			"text": "val document = tapServer.getStructure(\"Hello, this is a test for structure.\\n\\nThis should be a new section.\\n\\nAnd this should be the final section.\").results\n\ndef displayStructure(document:Document) = {\n    document.sections.map { section =>\n        \"section\\t\\t\\t\\n\".+{\n            section.sentences.map { sentence =>\n                \"\\ttext: \"+ sentence.text + \"\\t\\t\\n\"+\n                \"\\ttokens: |\"+ sentence.tokens.mkString(\"|\")+\"|\\t\\n\"+\n                \"\\t\\tlemmas: |\"+ sentence.tags.lemmas.mkString(\"|\")+\"|\\n\"+\n                \"\\t\\tposTags: |\"+ sentence.tags.posTags.mkString(\"|\")+\"|\\n\"\n            }.mkString(\"\")\n        }\n    }.mkString(\"\")\n}\n\nval structure = displayStructure(document)",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"tableHide": true,
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TEXT",
						"data": "\ndocument: Document = Document(List(Section(List(Sentence(Hello, this is a test for structure.,List(hello, ,, this, is, a, test, for, structure, .),Tags(List(),List(UH, ,, DT, VBZ, DT, NN, IN, NN, .))))), Section(List(Sentence(This should be a new section.,List(this, should, be, a, new, section, .),Tags(List(),List(DT, MD, VB, DT, JJ, NN, .))))), Section(List(Sentence(And this should be the final section.,List(and, this, should, be, the, final, section, .),Tags(List(),List(CC, DT, MD, VB, DT, JJ, NN, .)))))))\n\ndisplayStructure: (document: Document)String\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstructure: String =\n\"section\n\ttext: Hello, this is a test for structure.\n\ttokens: |hello|,|this|is|a|test|for|structure|.|\n\t\tlemmas: ||\n\t\tposTags: |UH|,|DT|VBZ|DT|NN|IN|NN|.|\nsection\n\ttext: This should be a new section.\n\ttokens: |this|should|be|a|new|section|.|\n\t\tlemmas: ||\n\t\tposTags: |DT|MD|VB|DT|JJ|NN|.|\nsection\n\ttext: And this should be the final section.\n\ttokens: |and|this|should|be|the|final|section|.|\n\t\tlemmas: ||\n\t\tposTags: |CC|DT|MD|VB|DT|JJ|NN|.|\n\"\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940294_-285762894",
			"id": "20170602-160854_396019080",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:43+0000",
			"dateFinished": "2017-06-09T13:47:44+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10202"
		},
		{
			"text": "println(s\"\"\"%table SECTION\\tSENTENCE\\tTAG\\n $structure\"\"\")",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TABLE",
						"data": "SECTION\tSENTENCE\tTAG\n section\t\t\t\n\ttext: Hello, this is a test for structure.\t\t\n\ttokens: |hello|,|this|is|a|test|for|structure|.|\t\n\t\tlemmas: ||\n\t\tposTags: |UH|,|DT|VBZ|DT|NN|IN|NN|.|\nsection\t\t\t\n\ttext: This should be a new section.\t\t\n\ttokens: |this|should|be|a|new|section|.|\t\n\t\tlemmas: ||\n\t\tposTags: |DT|MD|VB|DT|JJ|NN|.|\nsection\t\t\t\n\ttext: And this should be the final section.\t\t\n\ttokens: |and|this|should|be|the|final|section|.|\t\n\t\tlemmas: ||\n\t\tposTags: |CC|DT|MD|VB|DT|JJ|NN|.|\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940294_-285762894",
			"id": "20170602-174215_118165942",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:44+0000",
			"dateFinished": "2017-06-09T13:47:44+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10203"
		},
		{
			"text": "%md \nNow try the above with more substantial text. Use the `pharmacyText` example for cleaning, and try to get the structure in the same way. \n**Note:** you don't need to clean the text, as the pipeline cleans before analysing the structure.\n\nIt should look something like this:\n```\ndef structuredText = try {\n    //First, try and read in the file\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(\"pharm\")).get)\n    //Next, post the text to TAP for analysing the structure\n    val structure = ???\n    //If successful return the structure\n    Some(structure)\n} catch {\n    case(e:Exception) => {\n        println(s\"ERROR: There was a problem reading the file. $e\")\n        None\n    }\n}\n```",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"colWidth": 12,
				"editorMode": "ace/mode/markdown",
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<div class=\"markdown-body\">\n<p>Now try the above with more substantial text. Use the <code>pharmacyText</code> example for cleaning, and try to get the structure in the same way.<br/><strong>Note:</strong> you don&rsquo;t need to clean the text, as the pipeline cleans before analysing the structure.</p>\n<p>It should look something like this:</p>\n<pre><code>def structuredText = try {\n    //First, try and read in the file\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(&quot;pharm&quot;)).get)\n    //Next, post the text to TAP for analysing the structure\n    val structure = ???\n    //If successful return the structure\n    Some(structure)\n} catch {\n    case(e:Exception) =&gt; {\n        println(s&quot;ERROR: There was a problem reading the file. $e&quot;)\n        None\n    }\n}\n</code></pre>\n</div>"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940294_-285762894",
			"id": "20170602-161137_1825663598",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:40+0000",
			"dateFinished": "2017-06-09T13:47:40+0000",
			"status": "FINISHED",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10204"
		},
		{
			"title": "you try",
			"text": "def structuredText = try {\n    ???\n} catch {\n    ???\n}\n\nval pharmStructure = displayStructure(???)\n",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"editorSetting": {
					"language": "scala"
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "ERROR",
				"msg": [
					{
						"type": "TEXT",
						"data": "\n\n\n<console>:40: error: value isDefinedAt is not a member of Nothing\n           ???\n           ^\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940295_-286147643",
			"id": "20170602-162933_2036704278",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:44+0000",
			"dateFinished": "2017-06-09T13:47:44+0000",
			"status": "ERROR",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10205"
		},
		{
			"text": "println(s\"\"\"%table SECTION\\tSENTENCE\\tTAG\\n $???\"\"\")",
			"user": "anonymous",
			"dateUpdated": "2017-06-09T13:47:40+0000",
			"config": {
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"results": {
				},
				"enabled": true,
				"editorSetting": {
					"language": "scala"
				}
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "ERROR",
				"msg": [
					{
						"type": "TEXT",
						"data": "\n\n\n<console>:1: error: invalid string interpolation: `$$', `$'ident or `$'BlockExpr expected\nprintln(s\"\"\"%table SECTION\\tSENTENCE\\tTAG\\n $???\"\"\")\n            ^\n"
					}
				]
			},
			"apps": [

			],
			"jobName": "paragraph_1496739940295_-286147643",
			"id": "20170602-181039_1201167147",
			"dateCreated": "2017-06-06T09:05:40+0000",
			"dateStarted": "2017-06-09T13:47:45+0000",
			"dateFinished": "2017-06-09T13:47:45+0000",
			"status": "ERROR",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10206"
		},
		{
			"user": "anonymous",
			"config": {
				"colWidth": 12,
				"enabled": true,
				"results": {
				},
				"editorSetting": {
					"language": "scala"
				},
				"editorMode": "ace/mode/scala"
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [

			],
			"jobName": "paragraph_1497016060815_1384595979",
			"id": "20170609-134740_770490754",
			"dateCreated": "2017-06-09T13:47:40+0000",
			"status": "READY",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:10207"
		}
	],
	"name": "02 Text Wrangling",
	"id": "2CJH7SYGA",
	"angularObjects": {
		"2CJYXMTXA:shared_process": [

		],
		"2CJR68XDB:shared_process": [

		],
		"2CMG2JQR4:shared_process": [

		],
		"2CKJMGPT7:shared_process": [

		],
		"2CJYK3Q31:shared_process": [

		],
		"2CJY6S2UM:shared_process": [

		],
		"2CJXEN14Y:shared_process": [

		]
	},
	"config": {
		"looknfeel": "default",
		"personalizedMode": "false"
	},
	"info": {
	}
}