{"paragraphs":[{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496380831289_-939648977","id":"20170602-152031_858551274","dateCreated":"2017-06-02T15:20:31+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:803","text":"%md\n> Discuss this session online in the [LASI-17 Room](https://gitter.im/writing-analytics/LASI-17) of the Gitter [Writing Analytics Community](https://gitter.im/writing-analytics).","dateUpdated":"2017-06-02T15:21:55+1000","dateFinished":"2017-06-02T15:21:55+1000","dateStarted":"2017-06-02T15:21:55+1000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<blockquote>\n  <p>Discuss this session online in the <a href=\"https://gitter.im/writing-analytics/LASI-17\">LASI-17 Room</a> of the Gitter <a href=\"https://gitter.im/writing-analytics\">Writing Analytics Community</a>.</p>\n</blockquote>\n</div>"}]}},{"text":"//Access Local Filesystem\n\nobject LocalIO {\n    \n    import java.io.File\n    import scala.io.Source\n    \n    val IN_DIR_NAME = \"/input_files\"\n    val OUT_DIR_NAME = \"/output_files\"\n    \n    private val _thisDir:String = new File(\".\").getCanonicalPath\n    private var _workingDir:String = _thisDir\n\n    lazy val inputFileDir = _workingDir+IN_DIR_NAME\n    lazy val outputFileDir = _workingDir+OUT_DIR_NAME\n    \n    val visibleFile = (file:File) => !file.isHidden\n    val notDirectory = (file:File) => !file.isDirectory\n    val textFile = (file:File) => file.getName.split('.').last.contains(\"txt\")\n    \n    def setWorkingDir(directoryPath:String) = {\n        println(s\"Setting the working directory to: $directoryPath\")\n        this._workingDir = directoryPath\n    }\n    \n    def directoryFromString(directory:String):Option[File] = {\n         val newDir = new File(directory)\n         if (newDir.exists && newDir.isDirectory) Some(newDir)\n         else None\n    }\n    \n    def listFiles(directory:String):List[File] = {\n        directoryFromString(directory) match {\n            case Some(dir) => dir.listFiles.toList\n            case None => List[File]()\n        }\n    }\n    \n    def workingDirFiles = listFiles(_workingDir)\n    \n    def readFile(file:File) = {\n        val source = Source.fromFile(file.getCanonicalPath)\n        try {\n            source.getLines.mkString(\"\\n\\n\")\n        } finally {\n            source.close\n        }\n    }\n}\n\n//Classes for TAP data\ncase class Message(message:String)\n  //type Results[T] = List[T]\n  case class Result[T](message:String,results:T)\n  case class Tags(lemmas:List[String] = List(),posTags:List[String] = List())\n  case class Sentence(text:String,tokens:List[String],tags:Tags = Tags())\n  case class Section(sentences:List[Sentence])\n  case class Document(sections:List[Section])\n\n//The TapIO class\ncase class TapIO(server:String = \"http://localhost:8080\") {\n    \n    //Import some helper libraries\n    import scalaj.http._    // to manage http connection to TAP\n    import org.json4s._     // to serialise and deserialise JSON\n    import org.json4s.jackson.Serialization\n    import org.json4s.jackson.Serialization.{read, write}\n    \n    implicit val defaultFormats = Serialization.formats(NoTypeHints)\n    \n    val API_VERSION = \"v1\"\n    lazy val API_URL = server+\"/\"+API_VERSION\n    lazy val HEALTH_URL = API_URL+\"/health\"\n    lazy val CLEAN_URL = API_URL+\"/analyse/text/clean\"\n    lazy val STRUCTURE_URL = API_URL+\"/analyse/text/structure\"\n    \n    def serverDetails = Http(API_URL).asString\n\n    def getHealthMessage(debug:Boolean = false) = {\n        println(s\"Connecting to $HEALTH_URL\")\n        val response = Http(HEALTH_URL).asString\n        if(debug) println(response)\n        read[Message](response.body)\n    }\n\n    def serverIsHealthy = {\n        try { getHealthMessage().message==\"ok\" }\n        catch { case e:Exception => {\n                println(s\"There was a problem with the server: $e\")\n                false }\n        }\n    }\n    \n    def cleanText(text:String) = {\n    //println(s\"Cleaning text: $text\")\n    val response = Http(CLEAN_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[List[String]]](response.body)\n  }\n\n  def getStructure(text:String) = {\n    //println(s\"Getting structure for text: $text\")\n    val response = Http(STRUCTURE_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[Document]](response.body)\n  }\n}\n\nval tapServer = TapIO()\n\n\n","user":"admin","dateUpdated":"2017-06-02T17:00:48+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496380988727_-1108183795","id":"20170602-152308_1200100722","dateCreated":"2017-06-02T15:23:08+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1024","dateFinished":"2017-06-02T17:00:51+1000","dateStarted":"2017-06-02T17:00:48+1000","title":"Load support resources","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined object LocalIO\n\ndefined class Message\n\ndefined class Result\n\ndefined class Tags\n\ndefined class Sentence\n\ndefined class Section\n\ndefined class Document\n\ndefined class TapIO\n\ntapServer: TapIO = TapIO(http://localhost:8080)\n"}]}},{"text":"%md\n- why is cleaning necessary?\n- why is cleaning a non-trivial task?\n- what are the dangers in the cleaning process?\n- How much control can you have over input?\n- How to interact with other systems, with large range of encodings and protocols?\n- What level of cleaning is needed for various algorithms?\n- Sometimes non-alphanumeric characters hold meaning (think lists, headings, section breaks). What to do?\n\n","user":"admin","dateUpdated":"2017-06-02T15:37:43+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496380915073_-1640214903","id":"20170602-152155_1815331056","dateCreated":"2017-06-02T15:21:55+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:863","dateFinished":"2017-06-02T15:37:40+1000","dateStarted":"2017-06-02T15:37:40+1000","title":"Cleaning","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>why is cleaning necessary?</li>\n  <li>why is cleaning a non-trivial task?</li>\n  <li>what are the dangers in the cleaning process?</li>\n  <li>How much control can you have over input?</li>\n  <li>How to interact with other systems, with large range of encodings and protocols?</li>\n  <li>What level of cleaning is needed for various algorithms?</li>\n  <li>Sometimes non-alphanumeric characters hold meaning (think lists, headings, section breaks). What to do?</li>\n</ul>\n</div>"}]}},{"text":"tapServer.cleanText(\"C¢¶£§le∆˙©an §••–me˙˚˙©\\n\\npl•§ea£¢¬˙se\").results\n","user":"admin","dateUpdated":"2017-06-02T16:38:18+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496380951087_1422663821","id":"20170602-152231_784664054","dateCreated":"2017-06-02T15:22:31+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:937","dateFinished":"2017-06-02T16:38:18+1000","dateStarted":"2017-06-02T16:38:18+1000","title":"TAP Cleaning","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres125: List[String] = List(Clean me, please)\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496381375990_1957694655","id":"20170602-152935_2138789041","dateCreated":"2017-06-02T15:29:35+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1133","text":"%md\nLet's load something more substantial to clean - the file from the last notebook. By wrapping the work in a function (`pharmacyText`) and showing only the results of the function, we suppress all of the processing output. The function is also using `try,catch` to handle any errors that might arise trying to read the file. ","dateUpdated":"2017-06-02T15:39:13+1000","dateFinished":"2017-06-02T15:39:13+1000","dateStarted":"2017-06-02T15:39:13+1000","title":"Cleaning a file","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Let&rsquo;s load something more substantial to clean - the file from the last notebook. By wrapping the work in a function (<code>pharmacyText</code>) and showing only the results of the function, we suppress all of the processing output. The function is also using <code>try,catch</code> to handle any errors that might arise trying to read the file.</p>\n</div>"}]}},{"text":"def pharmacyText = try {\n    //First, try and read in the file\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(\"pharm\")).get)\n    //Next, post the text to TAP for cleaning\n    val cleanedText = tapServer.cleanText(text).results\n    //If successful return the cleaned text\n    Some(cleanedText)\n} catch {\n    case(e:Exception) => {\n        println(s\"ERROR: There was a problem reading the file. $e\")\n        None\n    }\n}","user":"admin","dateUpdated":"2017-06-02T16:17:15+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496381456619_-1284124601","id":"20170602-153056_702537100","dateCreated":"2017-06-02T15:30:56+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1233","dateFinished":"2017-06-02T16:17:16+1000","dateStarted":"2017-06-02T16:17:15+1000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npharmacyText: Option[Results[String]]\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":true,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496382104684_989889183","id":"20170602-154144_1281390563","dateCreated":"2017-06-02T15:41:44+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1675","text":"%md\nThe function `pharmacyText` returns an `Option[String]` which means that the result can either be a `String` or nothing. This is a way of avoiding problems with `null` values when we can't be certain that we will get the results we expect.\n\nThere are a number of ways of working with options. When we are just printing the result, `getOrElse` is a good approach. Because the results from TAP are a list of strings, we can also iterate over the list and print each string.\n\nHandling the unexpected in analytics is essential, otherwise we would spend the whole time fixing bugs rather than analysing data. Try this out by editing \"pharm\" in `pharmacyText` to something we know won't match. e.g.\n```\nval text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(\"noFileWithThisString\")).get)\n```\n","dateUpdated":"2017-06-02T15:57:52+1000","dateFinished":"2017-06-02T15:53:38+1000","dateStarted":"2017-06-02T15:53:38+1000","title":"Handling the unexpected","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The function <code>pharmacyText</code> returns an <code>Option[String]</code> which means that the result can either be a <code>String</code> or nothing. This is a way of avoiding problems with <code>null</code> values when we can&rsquo;t be certain that we will get the results we expect.</p>\n<p>There are a number of ways of working with options. When we are just printing the result, <code>getOrElse</code> is a good approach.</p>\n<p>Handling the unexpected in analytics is essential, otherwise we would spend the whole time fixing bugs rather than analysing data. Try this out by editing &ldquo;pharm&rdquo; in <code>pharmacyText</code> to something we know won&rsquo;t match. e.g.</p>\n<pre><code>val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(&quot;noFileWithThisString&quot;)).get)\n</code></pre>\n</div>"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496381485457_-429951394","id":"20170602-153125_1340194947","dateCreated":"2017-06-02T15:31:25+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1306","text":"pharmacyText.getOrElse(List()).foreach(println(_))","dateUpdated":"2017-06-02T16:17:20+1000","dateFinished":"2017-06-02T16:17:20+1000","dateStarted":"2017-06-02T16:17:20+1000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Before I went on placement in XXXX in the Summer break, I didnt know how much the pharmacy means in the day-to-day life of the average elderly person, but also how important HMR is, and how it can save lives. I was familiar with the usual aspects of being older: more medical conditions that leads to more medications which leads to more medications being forgotten and the vicious cycle that ensues, but to see how this actually played out in everyday practice, with the consequences that it entailed, was eye opening, sad and exciting all at once.\nWe had one case of an elderly gentleman (and he really was a gentle man)- Mr DA, who had been baffling his doctors and the pharmacy for months about his fluctuating INR. No one could work out what it was, and it was only after placement when I rang to enquire as to how this gentleman was going for my case review that I found out that an HMR had been done (finally after multiple requests to the GP) and Mr DA had been intermittently taking fish oil without telling anyone. Mr DA would take a fish oil every other day or so, for a few days, when he remembered, which was a bit patchy at the best of times. As a result his INR would go up and then his warfarin would need to change in his Webster pack that we would pack for him, and then he would forget to take the fish oil for a while and his INR would go down, and his warfarin dose would need to change again- It was IT1 week 3 Cardiovascular right in front of my eyes!\nHowever, most surprisingly to me, it highlighted and challenged my ideas about the importance of HMR (which I had learnt about in theory in PS2). While learning about HMR in PS2 I skeptical that having a medication review in the home would really contribute much to the report, and really that it was a bit of a gimmick. After all, medications are the same whether they are in the pharmacy or in the home.... Right? This case brought home the importance of seeing the medications in situ, as the fish oil was only found out about once it was seen in the cupboard along side Mr DAs usual Webster pack. It could be said that the HMR potentially saved the life of this patient, as his fish oil is now being packed, and being taken consistently and the INR has settled.\nI also came to see the effects of once cognitive impairment starts to set in from an objective point of view, which I wasnt able to see previously. I saw from a pharmacists point of view how it becomes infinitely more difficult to help patients with self-managing their medication especially if non-intentional non-adherence becomes a problem. Mr DA wasnt able to tell us that he was on fish oil, as he forgot that he had it, and that in itself presented as a fluctuating INR. He would also forget to take his medication from his Webster packs for weeks at a time also, returning the full, unused packs of Websters back to the pharmacy. This non-intentional non-adherence (as we learnt in PS2) was having therapeutic repercussions, probably compounding his medication related issues many times over.\nHowever, the situation also brought back memories for me, of my father in his dementia having scripts filled with boxes of medications around the house after seeing the Dr and then forgetting to take the medications, and then repeating the process again next time he went back to see the GP. It is exactly this situation that a person isnt going to necessarily remember or admit to, but could lead to polypharmacy that could have dire consequences.\nIt is another situation that an HMR will identify and report back to the doctor, and potentially save a life with.\nAs a result, I have become a converted HMR advocate. While I had no interest in becoming accredited, I am now keen to see what it involves and how I can be of use in this context within the profession. This experience has truly shaped my professional life, and Mr DA will always stay with me as the patient who taught me the importance of HMR.Congratulations, you have successfully read in a file!\\nSorry it has nothing to do with pharmacy.\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496381758340_-778550867","id":"20170602-153558_1978224741","dateCreated":"2017-06-02T15:35:58+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1456","text":"%md\n- chunking\n- tokenising\n- multiple approaches may be needed depending on what is ahead (i.e. different algorithms need different text input)","dateUpdated":"2017-06-02T18:03:48+1000","dateFinished":"2017-06-02T18:03:45+1000","dateStarted":"2017-06-02T18:03:45+1000","title":"Finding structure in unstructured text","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>chunking</li>\n  <li>tokenising</li>\n  <li>multiple approaches may be needed depending on what is ahead (i.e. different algorithms need different text input)</li>\n</ul>\n</div>"}]}},{"text":"val document = tapServer.getStructure(\"Hello, this is a test for structure.\\n\\nThis should be a new section.\\n\\nAnd this should be the final section.\").results\n\ndef displayStructure(document:Document) = {\n    document.sections.map { section =>\n        \"section\\t\\t\\t\\n\".+{\n            section.sentences.map { sentence =>\n                \"\\ttext: \"+ sentence.text + \"\\t\\t\\n\"+\n                \"\\ttokens: |\"+ sentence.tokens.mkString(\"|\")+\"|\\t\\n\"+\n                \"\\t\\tlemmas: |\"+ sentence.tags.lemmas.mkString(\"|\")+\"|\\n\"+\n                \"\\t\\tposTags: |\"+ sentence.tags.posTags.mkString(\"|\")+\"|\\n\"\n            }.mkString(\"\")\n        }\n    }.mkString(\"\")\n}\n\nval structure = displayStructure(document)","user":"admin","dateUpdated":"2017-06-02T17:58:20+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496383734751_665093760","id":"20170602-160854_396019080","dateCreated":"2017-06-02T16:08:54+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2317","dateFinished":"2017-06-02T17:58:21+1000","dateStarted":"2017-06-02T17:58:20+1000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndocument: Document = Document(List(Section(List(Sentence(Hello, this is a test for structure.,List(hello, ,, this, is, a, test, for, structure, .),Tags(List(),List(UH, ,, DT, VBZ, DT, NN, IN, NN, .))))), Section(List(Sentence(This should be a new section.,List(this, should, be, a, new, section, .),Tags(List(),List(DT, MD, VB, DT, JJ, NN, .))))), Section(List(Sentence(And this should be the final section.,List(and, this, should, be, the, final, section, .),Tags(List(),List(CC, DT, MD, VB, DT, JJ, NN, .)))))))\n\ndisplayStructure: (document: Document)String\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstructure: String =\n\"section\n\ttext: Hello, this is a test for structure.\n\ttokens: |hello|,|this|is|a|test|for|structure|.|\n\t\tlemmas: ||\n\t\tposTags: |UH|,|DT|VBZ|DT|NN|IN|NN|.|\nsection\n\ttext: This should be a new section.\n\ttokens: |this|should|be|a|new|section|.|\n\t\tlemmas: ||\n\t\tposTags: |DT|MD|VB|DT|JJ|NN|.|\nsection\n\ttext: And this should be the final section.\n\ttokens: |and|this|should|be|the|final|section|.|\n\t\tlemmas: ||\n\t\tposTags: |CC|DT|MD|VB|DT|JJ|NN|.|\n\"\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496389335446_234894631","id":"20170602-174215_118165942","dateCreated":"2017-06-02T17:42:15+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4132","text":"println(s\"\"\"%table SECTION\\tSENTENCE\\tTAG\\n $structure\"\"\")","dateUpdated":"2017-06-02T17:58:27+1000","dateFinished":"2017-06-02T17:58:27+1000","dateStarted":"2017-06-02T17:58:27+1000","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"SECTION\tSENTENCE\tTAG\n section\t\t\t\n\ttext: Hello, this is a test for structure.\t\t\n\ttokens: |hello|,|this|is|a|test|for|structure|.|\t\n\t\tlemmas: ||\n\t\tposTags: |UH|,|DT|VBZ|DT|NN|IN|NN|.|\nsection\t\t\t\n\ttext: This should be a new section.\t\t\n\ttokens: |this|should|be|a|new|section|.|\t\n\t\tlemmas: ||\n\t\tposTags: |DT|MD|VB|DT|JJ|NN|.|\nsection\t\t\t\n\ttext: And this should be the final section.\t\t\n\ttokens: |and|this|should|be|the|final|section|.|\t\n\t\tlemmas: ||\n\t\tposTags: |CC|DT|MD|VB|DT|JJ|NN|.|\n"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496383897011_-92093719","id":"20170602-161137_1825663598","dateCreated":"2017-06-02T16:11:37+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2390","text":"%md \nNow try the above with more substantial text. Use the `pharmacyText` example for cleaning, and try to get the structure in the same way. \n**Note:** you don't need to clean the text, as the pipeline cleans before analysing the structure.\n\nIt should look something like this:\n```\ndef structuredText = try {\n    //First, try and read in the file\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(\"pharm\")).get)\n    //Next, post the text to TAP for analysing the structure\n    val structure = ???\n    //If successful return the structure\n    Some(structure)\n} catch {\n    case(e:Exception) => {\n        println(s\"ERROR: There was a problem reading the file. $e\")\n        None\n    }\n}\n```","dateUpdated":"2017-06-02T18:09:40+1000","dateFinished":"2017-06-02T18:09:40+1000","dateStarted":"2017-06-02T18:09:40+1000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now try the above with more substantial text. Use the <code>pharmacyText</code> example for cleaning, and try to get the structure in the same way.<br/><strong>Note:</strong> you don&rsquo;t need to clean the text, as the pipeline cleans before analysing the structure.</p>\n<p>It should look something like this:</p>\n<pre><code>def structuredText = try {\n    //First, try and read in the file\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(&quot;pharm&quot;)).get)\n    //Next, post the text to TAP for analysing the structure\n    val structure = ???\n    //If successful return the structure\n    Some(structure)\n} catch {\n    case(e:Exception) =&gt; {\n        println(s&quot;ERROR: There was a problem reading the file. $e&quot;)\n        None\n    }\n}\n</code></pre>\n</div>"}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496384973467_-1571308745","id":"20170602-162933_2036704278","dateCreated":"2017-06-02T16:29:33+1000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2959","dateUpdated":"2017-06-02T18:10:51+1000","dateFinished":"2017-06-02T18:10:51+1000","dateStarted":"2017-06-02T18:10:51+1000","errorMessage":"","title":"you try","text":"def structuredText = try {\n    ???\n} catch {\n    ???\n}\n\nval pharmStructure = displayStructure(???)\n"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496391039370_-1026831641","id":"20170602-181039_1201167147","dateCreated":"2017-06-02T18:10:39+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4959","text":"println(s\"\"\"%table SECTION\\tSENTENCE\\tTAG\\n $???\"\"\")"}],"name":"02 Text Wrangling","id":"2CKGGZSMM","angularObjects":{"2CGWV1MGK:shared_process":[],"2CEVAN2GV:shared_process":[],"2CGJUBZ7V:shared_process":[],"2CFA6A5V1:shared_process":[],"2CG7VTQCX:shared_process":[],"2CEG2J2DN:shared_process":[],"2CEHG1843:shared_process":[],"2CEZJ1FFZ:shared_process":[],"2CG3DREEN:shared_process":[],"2CHBDJGUA:shared_process":[],"2CHGWK3QR:shared_process":[],"2CF1G5GT2:shared_process":[],"2CEFSXDFW:shared_process":[],"2CH8ZF27R:shared_process":[],"2CH1RZ17X:shared_process":[],"2CFKZEYRE:shared_process":[],"2CH9D63SV:shared_process":[],"2CE3V4W48:shared_process":[],"2CGKC4T26:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}