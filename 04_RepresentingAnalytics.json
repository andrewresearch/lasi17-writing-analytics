{"paragraphs":[{"text":"%md\n> Discuss this session online in the [LASI-17 Room](https://gitter.im/writing-analytics/LASI-17) of the Gitter [Writing Analytics Community](https://gitter.im/writing-analytics).","dateUpdated":"2017-06-03T21:15:32+1000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<blockquote>\n  <p>Discuss this session online in the <a href=\"https://gitter.im/writing-analytics/LASI-17\">LASI-17 Room</a> of the Gitter <a href=\"https://gitter.im/writing-analytics\">Writing Analytics Community</a>.</p>\n</blockquote>\n</div>"}]},"apps":[],"jobName":"paragraph_1496488532409_-1719459407","id":"20170602-152031_858551274","dateCreated":"2017-06-03T21:15:32+1000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8981"},{"title":"Load support resources","text":"//Access Local Filesystem\n\nobject LocalIO {\n    \n    import java.io.File\n    import scala.io.Source\n    \n    val IN_DIR_NAME = \"/input_files\"\n    val OUT_DIR_NAME = \"/output_files\"\n    \n    private val _thisDir:String = new File(\".\").getCanonicalPath\n    private var _workingDir:String = _thisDir\n\n    lazy val inputFileDir = _workingDir+IN_DIR_NAME\n    lazy val outputFileDir = _workingDir+OUT_DIR_NAME\n    \n    val visibleFile = (file:File) => !file.isHidden\n    val notDirectory = (file:File) => !file.isDirectory\n    val textFile = (file:File) => file.getName.split('.').last.contains(\"txt\")\n    \n    def setWorkingDir(directoryPath:String) = {\n        println(s\"Setting the working directory to: $directoryPath\")\n        this._workingDir = directoryPath\n    }\n    \n    def directoryFromString(directory:String):Option[File] = {\n         val newDir = new File(directory)\n         if (newDir.exists && newDir.isDirectory) Some(newDir)\n         else None\n    }\n    \n    def listFiles(directory:String):List[File] = {\n        directoryFromString(directory) match {\n            case Some(dir) => dir.listFiles.toList\n            case None => List[File]()\n        }\n    }\n    \n    def workingDirFiles = listFiles(_workingDir)\n    \n    def readFile(file:File) = {\n        val source = Source.fromFile(file.getCanonicalPath)\n        try {\n            source.getLines.mkString(\"\\n\\n\")\n        } finally {\n            source.close\n        }\n    }\n}\n\n//Classes for TAP data\ncase class Message(message:String)\n  //type Results[T] = List[T]\n  case class Result[T](message:String,results:T)\n  case class Tags(lemmas:List[String] = List(),posTags:List[String] = List())\n  case class Sentence(text:String,tokens:List[String],tags:Tags = Tags())\n  case class Section(sentences:List[Sentence])\n  case class Document(sections:List[Section])\n\n//The TapIO class\ncase class TapIO(server:String = \"http://localhost:8080\") {\n    \n    //Import some helper libraries\n    import scalaj.http._    // to manage http connection to TAP\n    import org.json4s._     // to serialise and deserialise JSON\n    import org.json4s.jackson.Serialization\n    import org.json4s.jackson.Serialization.{read, write}\n    \n    implicit val defaultFormats = Serialization.formats(NoTypeHints)\n    \n    val API_VERSION = \"v1\"\n    lazy val API_URL = server+\"/\"+API_VERSION\n    lazy val HEALTH_URL = API_URL+\"/health\"\n    lazy val CLEAN_URL = API_URL+\"/analyse/text/clean\"\n    lazy val STRUCTURE_URL = API_URL+\"/analyse/text/structure\"\n    \n    def serverDetails = Http(API_URL).asString\n\n    def getHealthMessage(debug:Boolean = false) = {\n        println(s\"Connecting to $HEALTH_URL\")\n        val response = Http(HEALTH_URL).asString\n        if(debug) println(response)\n        read[Message](response.body)\n    }\n\n    def serverIsHealthy = {\n        try { getHealthMessage().message==\"ok\" }\n        catch { case e:Exception => {\n                println(s\"There was a problem with the server: $e\")\n                false }\n        }\n    }\n    \n    def cleanText(text:String) = {\n    //println(s\"Cleaning text: $text\")\n    val response = Http(CLEAN_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[List[String]]](response.body)\n  }\n\n  def getStructure(text:String) = {\n    //println(s\"Getting structure for text: $text\")\n    val response = Http(STRUCTURE_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[Document]](response.body)\n  }\n}\n\nval tapServer = TapIO()\n\n\n","dateUpdated":"2017-06-03T21:15:55+1000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496488532428_-1739081601","id":"20170602-152308_1200100722","dateCreated":"2017-06-03T21:15:32+1000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8982"},{"title":" Revisiting representation and meaning","text":"%md\n\n- Just because something is in the UI, doesn’t mean the user finds it meaningful\n- What does the user find meaningful?\n- What analytics do we want to convey?\n- How can we help the user gain appropriate meaning from the analytics?","user":"admin","dateUpdated":"2017-06-03T21:26:11+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>Just because something is in the UI, doesn’t mean the user finds it meaningful</li>\n  <li>What does the user find meaningful?</li>\n  <li>What analytics do we want to convey?</li>\n  <li>How can we help the user gain appropriate meaning from the analytics?</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1496488532453_-1748700323","id":"20170602-184715_680410316","dateCreated":"2017-06-03T21:15:32+1000","dateStarted":"2017-06-03T21:26:11+1000","dateFinished":"2017-06-03T21:26:11+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8983"},{"text":"case class DisplayPhrase(text:String,style:String)\ncase class DisplaySection(text:String,phrases:List[DisplayPhrase])\ncase class DisplayDoc(title:String,sections:List[DisplaySection])","user":"admin","dateUpdated":"2017-06-03T23:35:03+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class DisplayPhrase\n\ndefined class DisplaySection\n\ndefined class DisplayDoc\n"}]},"apps":[],"jobName":"paragraph_1496496881597_-783935461","id":"20170603-233441_517782666","dateCreated":"2017-06-03T23:34:41+1000","dateStarted":"2017-06-03T23:35:03+1000","dateFinished":"2017-06-03T23:35:05+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8984"},{"text":"def markupSection(phrases:List[DisplayPhrase],markedUp:String=\"\"):String = {\n  if (phrases.isEmpty) markedUp\n  else {\n    val p = phrases.head\n    val newMarkedUp = markedUp.replace(p.text,s\"\"\"<span class=\"${p.style}\">${p.text}</span>\"\"\")\n    markupSection(phrases.tail,newMarkedUp)\n  }\n}\n\n","user":"admin","dateUpdated":"2017-06-04T09:36:34+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmarkupSection: (phrases: List[DisplayPhrase], markedUp: String)String\n"}]},"apps":[],"jobName":"paragraph_1496496936510_878472591","id":"20170603-233536_278769595","dateCreated":"2017-06-03T23:35:36+1000","dateStarted":"2017-06-04T09:36:34+1000","dateFinished":"2017-06-04T09:36:34+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8985"},{"text":"def markup(doc:DisplayDoc) = {\n  println(s\"%angular <h3>${doc.title}</h3>\")\n  doc.sections.map( s => markupSection(s.phrases,s.text)).foreach { sec => \n      println(s\"<p>$sec<p>\")\n  }\n}","user":"admin","dateUpdated":"2017-06-04T09:36:37+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmarkup: (doc: DisplayDoc)Unit\n"}]},"apps":[],"jobName":"paragraph_1496497005906_322769297","id":"20170603-233645_1551543498","dateCreated":"2017-06-03T23:36:45+1000","dateStarted":"2017-06-04T09:36:37+1000","dateFinished":"2017-06-04T09:36:37+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8986"},{"title":"Document to display","text":"val sections = List(\n  DisplaySection(\"A sentence to test the angular display system.\",List(DisplayPhrase(\"angular display\",\"important\"),DisplayPhrase(\"test\",\"significant\"))),\n  DisplaySection(\"This would be another section. Sections can have more than one sentence.\",List(DisplayPhrase(\"section\",\"keyword\"),DisplayPhrase(\"sentence\",\"keyword\"),DisplayPhrase(\"more than one\",\"important\")))\n)\n\nval doc = DisplayDoc(\"A Test Document\",sections)","user":"admin","dateUpdated":"2017-06-04T09:36:39+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsections: List[DisplaySection] = List(DisplaySection(A sentence to test the angular display system.,List(DisplayPhrase(angular display,important), DisplayPhrase(test,significant))), DisplaySection(This would be another section. Sections can have more than one sentence.,List(DisplayPhrase(section,keyword), DisplayPhrase(sentence,keyword), DisplayPhrase(more than one,important))))\n\ndoc: DisplayDoc = DisplayDoc(A Test Document,List(DisplaySection(A sentence to test the angular display system.,List(DisplayPhrase(angular display,important), DisplayPhrase(test,significant))), DisplaySection(This would be another section. Sections can have more than one sentence.,List(DisplayPhrase(section,keyword), DisplayPhrase(sentence,keyword), DisplayPhrase(more than one,important)))))\n"}]},"apps":[],"jobName":"paragraph_1496496908224_1411118311","id":"20170603-233508_226533527","dateCreated":"2017-06-03T23:35:08+1000","dateStarted":"2017-06-04T09:36:39+1000","dateFinished":"2017-06-04T09:36:40+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8987"},{"title":"CSS","text":"%angular\n<style>\n.important {\n    background-color: {{important}};\n}\n.keyword {\n    text-decoration: none;\n    border-bottom: 1px dashed #933;\n}\n.significant {\n    color: green;\n    font-weight: bold;\n}\n</style>","user":"admin","dateUpdated":"2017-06-04T00:13:29+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":true},"editorMode":"ace/mode/undefined","editorHide":false,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\n.important {\n    background-color: {{important}};\n}\n.keyword {\n    text-decoration: none;\n    border-bottom: 1px dashed #933;\n}\n.significant {\n    color: green;\n    font-weight: bold;\n}\n</style>"}]},"apps":[],"jobName":"paragraph_1496489091312_-29986471","id":"20170603-212451_209374570","dateCreated":"2017-06-03T21:24:51+1000","dateStarted":"2017-06-04T00:08:49+1000","dateFinished":"2017-06-04T00:08:49+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8988"},{"text":"{\n    val cssColour = z.select(\"css-colour\",Seq((\"yellow\",\"yellow\"),(\"lightblue\",\"lightblue\")))\n    z.angularBind(\"important\",cssColour)\n}","user":"admin","dateUpdated":"2017-06-03T23:58:17+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","runOnSelectionChange":true},"settings":{"params":{"css-colour":"yellow"},"forms":{"css-colour":{"name":"css-colour","displayName":"css-colour","type":"select","defaultValue":"","options":[{"value":"yellow","displayName":"yellow","$$hashKey":"object:9219"},{"value":"lightblue","displayName":"lightblue","$$hashKey":"object:9220"}],"hidden":false,"$$hashKey":"object:9215"}}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1496497326167_1348967422","id":"20170603-234206_725232377","dateCreated":"2017-06-03T23:42:06+1000","dateStarted":"2017-06-03T23:58:17+1000","dateFinished":"2017-06-03T23:58:17+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8989"},{"text":"markup(doc)","user":"admin","dateUpdated":"2017-06-04T09:36:47+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h3>A Test Document</h3>\n<p>A sentence to <span class=\"significant\">test</span> the <span class=\"important\">angular display</span> system.<p>\n<p>This would be another <span class=\"keyword\">section</span>. Sections can have <span class=\"important\">more than one</span> <span class=\"keyword\">sentence</span>.<p>\n"}]},"apps":[],"jobName":"paragraph_1496489295921_-432358844","id":"20170603-212815_1829548473","dateCreated":"2017-06-03T21:28:15+1000","dateStarted":"2017-06-04T09:36:47+1000","dateFinished":"2017-06-04T09:36:48+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8990","title":"Displaying the HTML"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496489322576_-521974690","id":"20170603-212842_304452683","dateCreated":"2017-06-03T21:28:42+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8991","dateUpdated":"2017-06-04T10:03:11+1000","dateFinished":"2017-06-04T10:03:11+1000","dateStarted":"2017-06-04T10:03:11+1000","title":"Putting it all together","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>So far, we have tracked the Writing Analytics process through starting with cleaning the text, manipulating it into a structured form, performing basic counts, and then representing the analytics. Try creating a complete writing analytics system to display verbs and nouns to the writer in their text.</p>\n<p>The following paragraphs are setup to help scaffold you through the process:</p>\n<ol>\n  <li>Load resources (classes, objects, functions)</li>\n  <li>Select a text file to work with</li>\n  <li>Get the structure and analysis for the text</li>\n  <li>Obtain the desired analytics (verbs and nouns)</li>\n  <li>Create the display document with the text and the analytics</li>\n  <li>Display the analytics</li>\n  <li>Evaluate the results</li>\n</ol>\n</div>"}]},"text":"%md\nSo far, we have tracked the Writing Analytics process through starting with cleaning the text, manipulating it into a structured form, performing basic counts, and then representing the analytics. Try creating a complete writing analytics system to display verbs and nouns to the writer in their text.\n\nThe following paragraphs are setup to help scaffold you through the process:\n\n1. Load resources (classes, objects, functions)\n2. Select a text file to work with\n3. Get the structure and analysis for the text\n4. Obtain the desired analytics (verbs and nouns)\n5. Create the display document with the text and the analytics\n6. Display the analytics\n7. Evaluate the results"},{"text":"//As you work out which resources you will need, copy them from previous notes and paste them here\n\n//Class for connecting to TAP\n\n//Instantiate TAP class with appropriate URL\n\nval tapServer = ???\n\n//Helper functions (NOTE, you do not need to copy the markup functions that are already defined in this note)\n","user":"admin","dateUpdated":"2017-06-04T09:46:29+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496533391768_-880771006","id":"20170604-094311_856411997","dateCreated":"2017-06-04T09:43:11+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9568","title":"1 Load resources"},{"text":"//The string used for input\n\nval inputText = \"\"\"\n    << PASTE TEXT HERE >>\n\"\"\"\n","user":"admin","dateUpdated":"2017-06-04T09:47:27+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496533613832_578687197","id":"20170604-094653_434066266","dateCreated":"2017-06-04T09:46:53+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9716","title":"2 Input text"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496533619833_804165377","id":"20170604-094659_1511224525","dateCreated":"2017-06-04T09:46:59+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9776","text":"//Call getStructure(inputText) to get a structured version of your text with basic analytics (NOTE: You do not need to clean the text, as this is part of the structure pipeline on TAP)\n\nval tapAnalysis = try {\n    tapServer.getStructure(inputText).???\n} catch {\n    ???\n}","dateUpdated":"2017-06-04T09:55:56+1000","title":"3 Get analysis"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496533621283_1811437997","id":"20170604-094701_1428367620","dateCreated":"2017-06-04T09:47:01+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9836","text":"//You won't need most of the analytics. Create a new data structure that only has the information you need\n\nval nounVerbs = tapAnalysis.map(???)","dateUpdated":"2017-06-04T09:57:12+1000","title":"4 Extract what you need from the analytics (nouns and verbs)"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496533622121_1684470860","id":"20170604-094702_2033557321","dateCreated":"2017-06-04T09:47:02+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9896","text":"//Build the DisplayDoc from your data\n\nval title = ???\nval sections = ???\n\nval doc = DisplayDoc(title,sections)","dateUpdated":"2017-06-04T09:58:53+1000","title":"5 Create the display document"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496533623019_809182437","id":"20170604-094703_1011216159","dateCreated":"2017-06-04T09:47:03+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10016","text":"//Run the markup to create the visualisation\n\n???","dateUpdated":"2017-06-04T09:59:12+1000","title":"6 Display the analytics"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496534424332_1739442860","id":"20170604-100024_258661274","dateCreated":"2017-06-04T10:00:24+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10119","dateUpdated":"2017-06-04T10:02:34+1000","dateFinished":"2017-06-04T10:02:34+1000","dateStarted":"2017-06-04T10:02:34+1000","title":"7 Evaluate the results","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>How might this be pedagogically useful?</li>\n  <li>What algorithms have been used, and to what extent are they accurate?</li>\n  <li>Can you trace the analytics from the original data all of the way through the process to the final analytics presented to the user?</li>\n  <li>What could you do to improve this?</li>\n</ul>\n</div>"}]},"text":"%md\n- How might this be pedagogically useful?\n- What algorithms have been used, and to what extent are they accurate?\n- Can you trace the analytics from the original data all of the way through the process to the final analytics presented to the user?\n- What could you do to improve this?"},{"text":"\n","user":"admin","dateUpdated":"2017-06-04T10:02:34+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496534554221_-543890265","id":"20170604-100234_2008080998","dateCreated":"2017-06-04T10:02:34+1000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10188"}],"name":"04 Representing Analytics","id":"2CH2VR312","angularObjects":{"2CGWV1MGK:shared_process":[],"2CEVAN2GV:shared_process":[],"2CGJUBZ7V:shared_process":[],"2CFA6A5V1:shared_process":[],"2CG7VTQCX:shared_process":[],"2CEG2J2DN:shared_process":[],"2CEHG1843:shared_process":[],"2CEZJ1FFZ:shared_process":[],"2CG3DREEN:shared_process":[],"2CHBDJGUA:shared_process":[{"name":"important","object":"yellow","noteId":"2CH2VR312"},{"name":"text","object":"A sentence to test the \n    <span class=\"important\">angular display</span>\n system.","noteId":"2CH2VR312"}],"2CHGWK3QR:shared_process":[],"2CF1G5GT2:shared_process":[],"2CEFSXDFW:shared_process":[],"2CH8ZF27R:shared_process":[],"2CH1RZ17X:shared_process":[],"2CFKZEYRE:shared_process":[],"2CH9D63SV:shared_process":[],"2CE3V4W48:shared_process":[],"2CGKC4T26:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}