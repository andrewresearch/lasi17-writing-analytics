{"paragraphs":[{"text":"%md\n> Discuss this session online in the [LASI-17 Room](https://gitter.im/writing-analytics/LASI-17) of the Gitter [Writing Analytics Community](https://gitter.im/writing-analytics).","user":"admin","dateUpdated":"2017-06-03T11:44:53+1000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<blockquote>\n  <p>Discuss this session online in the <a href=\"https://gitter.im/writing-analytics/LASI-17\">LASI-17 Room</a> of the Gitter <a href=\"https://gitter.im/writing-analytics\">Writing Analytics Community</a>.</p>\n</blockquote>\n</div>"}]},"apps":[],"jobName":"paragraph_1496393564584_1065514064","id":"20170602-152031_858551274","dateCreated":"2017-06-02T18:52:44+1000","dateStarted":"2017-06-03T11:44:53+1000","dateFinished":"2017-06-03T11:44:54+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8392"},{"title":"Load libraries","text":"%spark.dep\n//Dependencies\nz.load(\"org.apache.commons:commons-math3:3.6.1\")\nimport org.apache.commons.math3.stat.descriptive._","user":"admin","dateUpdated":"2017-06-03T12:15:24+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Must be used before SparkInterpreter (%spark) initialized\nHint: put this paragraph before any Spark code and restart Zeppelin/Interpreter"}]},"apps":[],"jobName":"paragraph_1496453737680_1655545157","id":"20170603-113537_1599598889","dateCreated":"2017-06-03T11:35:37+1000","dateStarted":"2017-06-03T11:44:53+1000","dateFinished":"2017-06-03T11:44:53+1000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:8393"},{"title":"Define classes and objects","text":"//Access Local Filesystem\n\nobject LocalIO {\n    \n    import java.io.File\n    import scala.io.Source\n    \n    val IN_DIR_NAME = \"/input_files\"\n    val OUT_DIR_NAME = \"/output_files\"\n    \n    private val _thisDir:String = new File(\".\").getCanonicalPath\n    private var _workingDir:String = _thisDir\n\n    lazy val inputFileDir = _workingDir+IN_DIR_NAME\n    lazy val outputFileDir = _workingDir+OUT_DIR_NAME\n    \n    val visibleFile = (file:File) => !file.isHidden\n    val notDirectory = (file:File) => !file.isDirectory\n    val textFile = (file:File) => file.getName.split('.').last.contains(\"txt\")\n    \n    def setWorkingDir(directoryPath:String) = {\n        println(s\"Setting the working directory to: $directoryPath\")\n        this._workingDir = directoryPath\n    }\n    \n    def directoryFromString(directory:String):Option[File] = {\n         val newDir = new File(directory)\n         if (newDir.exists && newDir.isDirectory) Some(newDir)\n         else None\n    }\n    \n    def listFiles(directory:String):List[File] = {\n        directoryFromString(directory) match {\n            case Some(dir) => dir.listFiles.toList\n            case None => List[File]()\n        }\n    }\n    \n    def workingDirFiles = listFiles(_workingDir)\n    \n    def readFile(file:File) = {\n        val source = Source.fromFile(file.getCanonicalPath)\n        try {\n            source.getLines.mkString(\"\\n\\n\")\n        } finally {\n            source.close\n        }\n    }\n}\n\n//Classes for TAP data\ncase class Message(message:String)\n  //type Results[T] = List[T]\n  case class Result[T](message:String,results:T)\n  case class Tags(lemmas:List[String] = List(),posTags:List[String] = List())\n  case class Sentence(text:String,tokens:List[String],tags:Tags = Tags())\n  case class Section(sentences:List[Sentence])\n  case class Document(sections:List[Section])\n  type Vocab = Map[String,List[String]]\n\n//The TapIO class\ncase class TapIO(server:String = \"http://localhost:8080\") {\n    \n    //Import some helper libraries\n    import scalaj.http._    // to manage http connection to TAP\n    import org.json4s._     // to serialise and deserialise JSON\n    import org.json4s.jackson.Serialization\n    import org.json4s.jackson.Serialization.{read, write}\n    \n    implicit val defaultFormats = Serialization.formats(NoTypeHints)\n    \n    val API_VERSION = \"v1\"\n    lazy val API_URL = server+\"/\"+API_VERSION\n    lazy val HEALTH_URL = API_URL+\"/health\"\n    lazy val CLEAN_URL = API_URL+\"/analyse/text/clean\"\n    lazy val STRUCTURE_URL = API_URL+\"/analyse/text/structure\"\n    lazy val VOCAB_URL = API_URL+\"/analyse/text/vocab\"\n    \n    def serverDetails = Http(API_URL).asString\n\n    def getHealthMessage(debug:Boolean = false) = {\n        println(s\"Connecting to $HEALTH_URL\")\n        val response = Http(HEALTH_URL).asString\n        if(debug) println(response)\n        read[Message](response.body)\n    }\n\n    def serverIsHealthy = {\n        try { getHealthMessage().message==\"ok\" }\n        catch { case e:Exception => {\n                println(s\"There was a problem with the server: $e\")\n                false }\n        }\n    }\n    \n    def cleanText(text:String) = {\n    //println(s\"Cleaning text: $text\")\n    val response = Http(CLEAN_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[List[String]]](response.body)\n  }\n\n  def getStructure(text:String) = {\n    //println(s\"Getting structure for text: $text\")\n    val response = Http(STRUCTURE_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response)\n    read[Result[Document]](response.body)\n  }\n  \n  def getVocab(text:String) = {\n    //println(s\"Getting structure for text: $text\")\n    val response = Http(VOCAB_URL).postData(text).header(\"content-type\", \"application/json\").asString\n    //println(response.body)\n    read[Result[Vocab]](response.body) \n  }\n}\n\nLocalIO.setWorkingDir(\"/notebook\")\nval tapServer = TapIO()\n\n\n","user":"admin","dateUpdated":"2017-06-03T19:05:49+1000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496393564587_1065898813","id":"20170602-152308_1200100722","dateCreated":"2017-06-02T18:52:44+1000","dateStarted":"2017-06-03T15:00:39+1000","dateFinished":"2017-06-03T15:00:41+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8394","errorMessage":""},{"title":"Define functions","text":"def getDocument(name:String) = try {\n    val inputTextFiles = LocalIO.listFiles(LocalIO.inputFileDir).filter(LocalIO.textFile)\n    val text = LocalIO.readFile(inputTextFiles.find(_.getName.contains(name)).get)\n    Some(tapServer.getStructure(text).results)\n} catch {\n    case(e:Exception) => {\n        println(s\"ERROR: There was a problem reading the file ($name). $e\")\n        None\n    }\n}\n\n\ndef histogram(input:List[Int],bins:Int,min:Option[Int]=None,max:Option[Int]=None): List[Int] = {\n  val rangeMin = min.getOrElse(input.min).toDouble\n  val binWidth = (max.getOrElse(input.max).toDouble - rangeMin)/bins\n\n  def upper(c:Int) = rangeMin+(binWidth*c)\n\n  def histogramBuilder(inputList:List[Int],count:Int=1,histogram:List[Int]=List()): List[Int] = {\n    val lists = inputList.partition(_ <= upper(count))\n    val newHist = histogram :+ lists._1.length\n    if (newHist.length == bins) newHist\n    else histogramBuilder(lists._2,count+1,newHist)\n  }\n\n  histogramBuilder(input)\n}\n\ndef histogramDbl(input:List[Double],bins:Int,min:Option[Double]=None,max:Option[Double]=None): List[Int] = {\n  val rangeMin = min.getOrElse(input.min)\n  val binWidth = (max.getOrElse(input.max) - rangeMin)/bins\n\n  def upper(c:Double) = rangeMin+(binWidth*c)\n\n  def histogramBuilder(inputList:List[Double],count:Int=1,histogram:List[Int]=List()): List[Int] = {\n    val lists = inputList.partition(_ <= upper(count))\n    val newHist:List[Int] = histogram :+ lists._1.length\n    if (newHist.length == bins) newHist\n    else histogramBuilder(lists._2,count+1,newHist)\n  }\n\n  histogramBuilder(input)\n}","user":"admin","dateUpdated":"2017-06-03T19:05:53+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496394207185_-1992733994","id":"20170602-190327_405229290","dateCreated":"2017-06-02T19:03:27+1000","dateStarted":"2017-06-03T15:43:12+1000","dateFinished":"2017-06-03T15:43:13+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8395","errorMessage":""},{"title":"Counting","text":"%md\n\n- How can counting be helpful?\n- How can counting be unhelpful?\n- How do we tell the difference?\n\n#### What kind of metrics might we find in unstructured text?\n\n- Word metrics\n- Sentence metrics\n- Document metrics\n- ???\n \n","user":"admin","dateUpdated":"2017-06-03T12:29:02+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>How can counting be helpful?</li>\n  <li>How can counting be unhelpful?</li>\n  <li>How do we tell the difference?</li>\n</ul>\n<h4>What kind of metrics might we find in unstructured text?</h4>\n<ul>\n  <li>Word metrics</li>\n  <li>Sentence metrics</li>\n  <li>Document metrics</li>\n  <li>???</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1496393787503_-1815964038","id":"20170602-185627_1697943720","dateCreated":"2017-06-02T18:56:27+1000","dateStarted":"2017-06-03T12:29:02+1000","dateFinished":"2017-06-03T12:29:02+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8396"},{"title":"Document structure","text":"//Before we do anything else, we need to get the structure for unstructured text\n val doc = getDocument(\"pharm\").getOrElse(Document(List()))","user":"admin","dateUpdated":"2017-06-03T11:45:07+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496397497220_-760299544","id":"20170602-195817_1620842697","dateCreated":"2017-06-02T19:58:17+1000","dateStarted":"2017-06-03T11:45:07+1000","dateFinished":"2017-06-03T11:45:11+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8397","errorMessage":""},{"title":"Basic Document Counts","text":"{ \n    //Get the counts\n    val numSections = doc.sections.length\n    val numSentences = doc.sections.map(_.sentences.length).reduce(_+_)\n    val numTokens = doc.sections.flatMap(_.sentences.map(_.tokens.length)).reduce(_+_)\n    \n    //Calc averages\n    val avgSentPerSect = numSentences/numSections.toDouble\n    val avgTokPerSect = numTokens/numSections.toDouble\n    val avgTokPerSent = numTokens/numSentences.toDouble\n\n    //How many chunks?\n    println(s\"Number of sections: $numSections\")\n    println(s\"Number of sentences: $numSentences\")\n    println(s\"Number of tokens: $numTokens\")\n    \n    //Basic averages?\n    println(f\"Average sentences per section: $avgSentPerSect%1.1f\")\n    println(f\"Average tokens per section: $avgTokPerSect%1.1f\")\n    println(f\"Average tokens per sentence: $avgTokPerSent%1.1f\")\n    \n}","user":"admin","dateUpdated":"2017-06-03T11:45:08+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496393825134_-60693583","id":"20170602-185705_651831803","dateCreated":"2017-06-02T18:57:05+1000","dateStarted":"2017-06-03T11:45:08+1000","dateFinished":"2017-06-03T11:45:12+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8398","errorMessage":""},{"text":"%md\nThese simple metrics would allow us to compare documents based on their sizes.\nHowever, if we look at the metrics inside a document we can get some more interesting insights.\nAs an example, let's take a look at sentence length of the course of a document.","user":"admin","dateUpdated":"2017-06-03T11:44:55+1000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>These simple metrics would allow us to compare documents based on their sizes.<br/>However, if we look at the metrics inside a document we can get some more interesting insights.<br/>As an example, let&rsquo;s take a look at sentence length of the course of a document.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1496393564588_1063975069","id":"20170602-153056_702537100","dateCreated":"2017-06-02T18:52:44+1000","dateStarted":"2017-06-03T11:44:55+1000","dateFinished":"2017-06-03T11:44:55+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8399"},{"text":"{\n    val sentences = doc.sections.flatMap(_.sentences)\n    //get the number of tokens for each sentence (numbered 1 to 22)\n    val tokenCounts = sentences.zipWithIndex.map { case(sent,idx) =>\n        (idx+1,sent.tokens.length)\n    }\n    //format ready for graphing\n    val rowFormatter = (t:(Int,Int)) => s\"${t._1}\\t${t._2}\\n\"\n\n    val formatted = tokenCounts.map(rowFormatter)\n    \n    println(s\"%table sentence\\ttokenCount\\n$formatted\")\n    \n}","user":"admin","dateUpdated":"2017-06-03T21:03:30+1000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{"0":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"List(1","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"44","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true,"editorSetting":{"language":"scala"},"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496393564588_1063975069","id":"20170602-153125_1340194947","dateCreated":"2017-06-02T18:52:44+1000","dateStarted":"2017-06-03T11:45:11+1000","dateFinished":"2017-06-03T11:45:13+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8400","errorMessage":"","title":"Sentence length"},{"text":"//Let's take a closer look at the anomalous sentences (>50 and < 21)\nobject metrics {\n    val sentLengths = doc.sections.flatMap(_.sentences).map(snt => (snt.text,snt.tokens.length))\n}\n\n{\nval long = metrics.sentLengths.filter(_._2 > 50)\n\nval short = metrics.sentLengths.filter(_._2 < 21)\n\nlong.foreach(println(_))\nshort.foreach(println(_))\n}\n","user":"admin","dateUpdated":"2017-06-03T11:44:55+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496393564589_1063590320","id":"20170602-184715_680410316","dateCreated":"2017-06-02T18:52:44+1000","dateStarted":"2017-06-03T11:45:12+1000","dateFinished":"2017-06-03T11:45:14+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8401","errorMessage":""},{"text":"%md\nCan we automate finding these anomalous sentences?\nLet's take a look at a histogram of these values.","user":"admin","dateUpdated":"2017-06-03T11:44:55+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Can we automate finding these anomalous sentences?<br/>Let&rsquo;s take a look at a histogram of these values.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1496399942212_343258227","id":"20170602-203902_1867889350","dateCreated":"2017-06-02T20:39:02+1000","dateStarted":"2017-06-03T11:44:55+1000","dateFinished":"2017-06-03T11:44:55+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8402"},{"text":"//List of sentenceLengths\nval lengths = metrics.sentLengths.map(_._2)\n\n//Histogram visualisation\n{\n    val hist = histogram(lengths,10,Some(1))\n    \n    val values = hist.zipWithIndex.map(t =>\"\"+(t._2+1)+\"\\t\"+t._1).mkString(\"\\n\")\n    \n    println(s\"%table bin\\tcount\\n$values\")\n}\n","user":"admin","dateUpdated":"2017-06-03T21:04:11+1000","config":{"colWidth":12,"enabled":true,"results":{"1":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496444606432_-1313461340","id":"20170603-090326_1662165552","dateCreated":"2017-06-03T09:03:26+1000","dateStarted":"2017-06-03T11:45:57+1000","dateFinished":"2017-06-03T11:45:58+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8403","errorMessage":"","title":"Histogram of sentence lengths"},{"text":"%md\nSo it looks like a normal curve with outliers in bin 10 (long sentences). This indicates that we may be able to automate the detection of these sentences using basic stats.","user":"admin","dateUpdated":"2017-06-03T11:44:55+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>So it looks like a normal curve with outliers in bin 10 (long sentences). This indicates that we may be able to automate the detection of these sentences using basic stats.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1496444658655_116173627","id":"20170603-090418_2127047927","dateCreated":"2017-06-03T09:04:18+1000","dateStarted":"2017-06-03T11:44:55+1000","dateFinished":"2017-06-03T11:44:55+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8404"},{"text":"//Get the descriptive stats for our lengths\nval stats = new DescriptiveStatistics(lengths.map(_.toDouble).toArray)","user":"admin","dateUpdated":"2017-06-03T21:05:45+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496452393774_-304493267","id":"20170603-111313_1738853595","dateCreated":"2017-06-03T11:13:13+1000","dateStarted":"2017-06-03T12:01:40+1000","dateFinished":"2017-06-03T12:01:41+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8405","errorMessage":"","title":"Descriptive stats to find outliers"},{"text":"//Now use these to find our outlier sentences\n{\nval mean = stats.getMean()\nval stdDev = stats.getStandardDeviation()\n\nval upperThresh =  mean+(1.5*stdDev)\nval lowerThresh = mean-(1.5*stdDev)\n\ndef outlier(x:Int):Boolean = { lowerThresh > x || x > upperThresh }\n\nmetrics.sentLengths.filter(sl => outlier(sl._2)).foreach(println(_))\n}","user":"admin","dateUpdated":"2017-06-03T12:01:48+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496453698825_1087209735","id":"20170603-113458_1251156011","dateCreated":"2017-06-03T11:34:58+1000","dateStarted":"2017-06-03T12:01:48+1000","dateFinished":"2017-06-03T12:01:49+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8406","errorMessage":""},{"title":"Vocabulary","text":"%md\nWe can sometimes gain insights into the writing by looking at the words that are used, how often they are used, and when they are used.\n\nAs an example, let's compare the overall vocabulary of the document with the vocabulary used in each section.\n","user":"admin","dateUpdated":"2017-06-03T12:26:59+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We can sometimes gain insights into the writing by looking at the words that are used, how often they are used, and when they are used.</p>\n<p>As an example, let&rsquo;s compare the overall vocabulary of the document with the vocabulary used in each section.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1496455308662_1913366838","id":"20170603-120148_71431368","dateCreated":"2017-06-03T12:01:48+1000","dateStarted":"2017-06-03T12:26:59+1000","dateFinished":"2017-06-03T12:26:59+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8407"},{"text":"val pharmText:String = readFile(\"pharm\") match {\n    case Some(text) => text\n    case None => \"\"\n}\nval cleanText = tapServer.cleanText(pharmText).results\nval docVocab = tapServer.getVocab(cleanText.mkString(\"\\n\")).results\nval doc = tapServer.getStructure(pharmText).results\n","user":"admin","dateUpdated":"2017-06-03T19:25:17+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496456817567_-326327673","id":"20170603-122657_1972573287","dateCreated":"2017-06-03T12:26:57+1000","dateStarted":"2017-06-03T19:25:17+1000","dateFinished":"2017-06-03T19:25:20+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8408","errorMessage":""},{"text":"val sectionVocab = cleanText.map(text => tapServer.getVocab(text).results)","user":"admin","dateUpdated":"2017-06-03T15:20:11+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496463227473_200972233","id":"20170603-141347_717491510","dateCreated":"2017-06-03T14:13:47+1000","dateStarted":"2017-06-03T15:19:57+1000","dateFinished":"2017-06-03T15:19:57+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8409","errorMessage":""},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496482054970_1076855157","id":"20170603-192734_1954170215","dateCreated":"2017-06-03T19:27:34+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9515","text":" val secWords = doc.sections.map(sec => sec.sentences.map( s => s.tokens.length).sum)","dateUpdated":"2017-06-03T19:29:56+1000","dateFinished":"2017-06-03T19:29:57+1000","dateStarted":"2017-06-03T19:29:56+1000","errorMessage":""},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"stackedAreaChart":{"style":"stack"}},"commonSetting":{},"keys":[{"name":"section","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"unique","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496480799378_-1409403149","id":"20170603-190639_359977100","dateCreated":"2017-06-03T19:06:39+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9128","text":"//How many document unique words in each section?\n{\n    val docUnique = docVocab.get(\"1\").getOrElse(List()).toSet\n    val secUnique = sectionVocab.map(sec => sec.get(\"1\").getOrElse(List()).toSet.intersect(docUnique))\n    val printText = secUnique.zipWithIndex.zip(secWords).map(sec => \"\"+(sec._1._2+1)+\"\\t\"+f\"${(sec._1._1.size/sec._2.toDouble)}%1.2f\").mkString(\"\\n\")\n    println(s\"%table section\\tunique\\n$printText\")\n}","dateUpdated":"2017-06-03T20:06:36+1000","dateFinished":"2017-06-03T19:39:55+1000","dateStarted":"2017-06-03T19:39:55+1000","errorMessage":"","title":"Unique words over document"},{"text":"def descriptiveStats(xs:List[Int]) = new DescriptiveStatistics(xs.map(_.toDouble).toArray)\n\ndef skewDiff = {\n    val docVocabStats  = {\n        val ds = descriptiveStats(docVocab.map(_._2.size).toList)\n        ds.getSkewness()\n    }\n\n    val secVocabStats = sectionVocab.map { sec =>\n        val ds = descriptiveStats(sec.map(_._2.size).toList)\n        //println(ds)\n        ds.getSkewness()\n    }\n\n    val skewDiffs = secVocabStats.map {sec => \n        if (sec.isNaN) docVocabStats\n        else docVocabStats - sec\n    }\n    skewDiffs.zipWithIndex.map(sec => \"\"+(sec._2+1)+\"\\t\"+f\"${sec._1}%1.2f\").mkString(\"\\n\")\n}\n\n\nprintln(s\"%table section\\tunique\\n$skewDiff\")\n","user":"admin","dateUpdated":"2017-06-03T20:31:32+1000","config":{"colWidth":12,"enabled":true,"results":{"1":{"graph":{"mode":"lineChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496459084603_-1252201569","id":"20170603-130444_216388693","dateCreated":"2017-06-03T13:04:44+1000","dateStarted":"2017-06-03T20:31:32+1000","dateFinished":"2017-06-03T20:31:34+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8410","errorMessage":"","title":"Difference in skew"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496464169811_-998111656","id":"20170603-142929_294067635","dateCreated":"2017-06-03T14:29:29+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8411","text":"val news = \"\"\"\nPITTSBURGH -- Hines Ward's constant, ear-to-ear smile tucked behind a black face mask has been a lasting image for Pittsburgh Steelers fans the past 14 seasons.\nThey won't see it again. At least, not in a black-and-gold uniform.\nThe franchise's all-time leader in just about every meaningful receiving category will be released sometime in the next two weeks, president Art Rooney II said Wednesday on the team's website.\n\nWard, who turns 36 next week, was due to earn $4 million next season. The Pittsburgh Post-Gazette, citing an unnamed source, reported Thursday that the Steelers didn't approach Ward about taking a pay cut in order to remain on the team.\n\"We had a conversation today with Hines Ward and informed him that we plan to release him of his contract prior to the start of the 2012 NFL calendar year,\" Rooney said. \"Hines has been an integral part of our success since we drafted him in 1998, and we will forever be grateful for what he has helped us achieve.\"\nA four-time Pro Bowl selection and MVP of the 2006 Super Bowl, Ward will finish his Steelers career with 1,000 catches, 12,083 yards and 85 receiving touchdowns. He helped Pittsburgh to three AFC championships and a pair of Super Bowl wins.\n\nThe former \"Dancing With the Stars\" champion -- who spent last weekend working the red carpet at the Oscars -- doesn't appear ready to put away his cleats just yet, however.\n\"This isn't how I wanted this chapter of my career to end,\" Ward said in a statement. \"I did everything in my power to remain a Steeler and finish what I started here 14 years ago.\"\nWard vowed to return for a 15th season this fall.\n\"I do feel that I still have more football left in me and I am looking forward to playing in the NFL, again, this upcoming season,\" Ward said.\n\nSteelers quarterback Ben Roethlisberger told the Post-Gazette on Thursday that he left Ward a message on his cell phone \"letting him know, 'Thank you for everything.' \"\n\"Hines is black-and-gold,\" Roethlisberger told the newspaper. \"I see him and wonder what it'll be like for me late in my career, things like that. It's hard. Two of my favorite players growing up, Joe Montana and Jerry Rice, they're still 49ers. Hines will always be a Steeler.\"\nA third-round pick out of Georgia, Ward developed a reputation as one of the league's best blocking wide receivers, a trait that endeared him to the blue-collar fan base of one of the league's marquee franchises.\n\nWard was pretty good at catching passes too, particularly in the postseason. He helped the Steelers to their fifth Super Bowl in 2006 catching five passes for 123 receiving yards and a touchdown in a 21-10 win over Seattle.\n\"He has meant so much to this organization, both on and off the field,\" Rooney said, \"and we appreciate his efforts over the past 14 years.\"\nBy the end of the 2011 season, Ward found himself on the sideline for long stretches as youngsters Mike Wallace and Antonio Brown turned into Roethlisberger's favorite targets.\nBoth receivers topped 1,100 yards receiving and combined for 10 touchdowns, while Ward had just 46 catches for 381 yards and two scores. It was the worst reception total since his rookie year (15).\n\nWard took the demotion in stride and relished the role of elder statesman. Wallace, Brown and Emmanuel Sanders credited Ward for helping them mature both on and off the field.\nAll three players hoped Ward would come back for one more go, but understood they were nearing the end of an era.\n\"We all know the direction in which we're going with the receiving corps,\" Sanders said last month. \"But, like I said, Hines is still a great addition, just the knowledge he brings to the room. You can't pay for that. You can't coach that. He just brings that well-being of how to be a pro into the room.\"\nNow the corner locker he's held for more than a decade is vacant.\n\"Enjoyed playing with @mvp86hinesward learned a lot! Was a great mentor for me! You define a \"Steeler\",\" Brown tweeted after the announcement.\nIn a franchise built on the churning legs of Franco Harris, Rocky Bleier and Jerome Bettis, Ward blossomed into one of the league's most reliable receivers while serving as a security blanket for everyone from Kordell Stewart to Tommy Maddox to Roethlisberger.\n\nWard has six 1,000-yard receiving seasons, and just missed two more, posting 975 in both 2005-06 and 2006-07. He also returned eight kicks for 210 yards.\n\"Hines' accomplishments are numerous,\" Rooney said, \"and he will always be thought of as one of the all-time great Steelers.\n\"We wish him nothing but the best.\"\n\nIn his last game as a Steeler, a 29-23 postseason overtime loss to the Denver Broncos on Jan. 8, Ward did not record a catch.\nThe final pass thrown to him in a Steelers uniform came on Pittsburgh's final drive, when Roethlisberger tried to hit Ward running down the sideline. Denver defensive back Champ Bailey knocked it away, leaving Ward to face an uncertain future.\nHe may end his career in a different city, but Ward left little doubt where his heart lies.\n\"I gave my heart and soul for (the fans) every down and I will always bleed black and gold,\" Ward said.\nNow, he'll have to do it wearing another uniform if he wants to play again.\n\"\"\"","dateUpdated":"2017-06-03T20:32:37+1000","dateFinished":"2017-06-03T20:02:21+1000","dateStarted":"2017-06-03T20:02:21+1000","title":"News story","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\n\n\n\n\nnews: String =\n\"\nPITTSBURGH -- Hines Ward's constant, ear-to-ear smile tucked behind a black face mask has been a lasting image for Pittsburgh Steelers fans the past 14 seasons.\nThey won't see it again. At least, not in a black-and-gold uniform.\nThe franchise's all-time leader in just about every meaningful receiving category will be released sometime in the next two weeks, president Art Rooney II said Wednesday on the team's website.\n\nWard, who turns 36 next week, was due to earn $4 million next season. The Pittsburgh Post-Gazette, citing an unnamed source, reported Thursday that the Steelers didn't approach Ward about taking a pay cut in order to remain on the team.\n\"We had a conversation today with Hines Ward and informed him that we plan to release him of his contract prior to the s..."}]}},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{"1":{"graph":{"mode":"lineChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496483644563_-730442887","id":"20170603-195404_1221792724","dateCreated":"2017-06-03T19:54:04+1000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10458","text":"def docUniqueness(text:String) = {\n    val cleanText = tapServer.cleanText(text).results\n    val docVocab = tapServer.getVocab(cleanText.mkString(\"\\n\")).results\n    val doc = tapServer.getStructure(text).results\n    val sectionVocab = cleanText.map(text => tapServer.getVocab(text).results)\n    val secWords = doc.sections.map(sec => sec.sentences.map( s => s.tokens.length).sum)\n    val docUnique = docVocab.get(\"1\").getOrElse(List()).toSet\n    val secUnique = sectionVocab.map(sec => sec.get(\"1\").getOrElse(List()).toSet.intersect(docUnique))\n     secUnique.zipWithIndex.zip(secWords).map(sec => \"\"+(sec._1._2+1)+\"\\t\"+f\"${(sec._1._1.size/sec._2.toDouble)}%1.2f\").mkString(\"\\n\")\n}\n{\n    val printText = docUniqueness(news)\n    println(s\"%table section\\tunique\\n$printText\")\n}","dateUpdated":"2017-06-03T20:34:28+1000","dateFinished":"2017-06-03T20:06:29+1000","dateStarted":"2017-06-03T20:06:28+1000","errorMessage":"","title":"News section uniqueness"},{"title":"Bridge Building","text":"%md\n    * How could these be used pedagogically?\n    * What does the theory say?\n","user":"admin","dateUpdated":"2017-06-03T20:35:20+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>How could these be used pedagogically?\n    <ul>\n      <li>What does the theory say?</li>\n    </ul>\n  </li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1496456454284_1330479356","id":"20170603-122054_1236470797","dateCreated":"2017-06-03T12:20:54+1000","dateStarted":"2017-06-03T12:27:03+1000","dateFinished":"2017-06-03T12:27:03+1000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8412"},{"title":"Load your own document and try","text":"","user":"admin","dateUpdated":"2017-06-03T12:27:38+1000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496456823765_-1103304268","id":"20170603-122703_1679835277","dateCreated":"2017-06-03T12:27:03+1000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:8413"}],"name":"03 Basic Metrics","id":"2CHUC4W75","angularObjects":{"2CGWV1MGK:shared_process":[],"2CEVAN2GV:shared_process":[],"2CGJUBZ7V:shared_process":[],"2CFA6A5V1:shared_process":[],"2CG7VTQCX:shared_process":[],"2CEG2J2DN:shared_process":[],"2CEHG1843:shared_process":[],"2CEZJ1FFZ:shared_process":[],"2CG3DREEN:shared_process":[],"2CHBDJGUA:shared_process":[],"2CHGWK3QR:shared_process":[],"2CF1G5GT2:shared_process":[],"2CEFSXDFW:shared_process":[],"2CH8ZF27R:shared_process":[],"2CH1RZ17X:shared_process":[],"2CFKZEYRE:shared_process":[],"2CH9D63SV:shared_process":[],"2CE3V4W48:shared_process":[],"2CGKC4T26:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}